{"version":3,"sources":["components/Profile/UserInfo/UserInfo.module.css","components/Dialogs/Messages/Message/Message.module.css","components/Profile/Posts/PostItem/PostItem.module.css","components/NavBar/NavBar.module.css","components/FormButton/FormButton.module.css","components/Dialogs/Dialogs.module.css","components/Avatar/Avatar.module.css","components/Dialogs/Dialog/Dialog.module.css","components/Dialogs/Messages/NewMessage/NewMessage.module.css","components/Profile/Posts/NewPost/NewPost.module.css","components/Profile/Posts/Posts.module.css","components/Profile/Profile.module.css","components/Header/Header.module.css","components/NavBar/FriendItem/FriendItem.module.css","components/Dialogs/Messages/Messages.module.css","store/types/posts.tsx","store/reducers/posts.ts","store/types/dialogs.tsx","store/reducers/dialogs.ts","store/reducers/user.ts","store/reducers/friends.ts","store/reducers/index.ts","store/index.ts","components/Avatar/Avatar.tsx","components/Profile/UserInfo/UserInfo.tsx","components/FormButton/FormButton.tsx","components/Profile/Posts/NewPost/NewPost.tsx","components/Profile/Posts/PostItem/PostItem.tsx","components/Profile/Posts/Posts.tsx","components/Profile/Profile.tsx","Pages/ProfilePage/ProfilePage.tsx","store/actions/posts.tsx","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Messages/Message/Message.tsx","components/Dialogs/Messages/NewMessage/NewMessage.tsx","components/Dialogs/Messages/Messages.tsx","components/Dialogs/Dialogs.tsx","Pages/DialogsPage/DialogsPage.tsx","store/actions/dialogs.tsx","Pages/NewsPage/NewsPage.tsx","Pages/MusicPage/MusicPage.tsx","Pages/SettingsPage/SettingsPage.tsx","components/Header/Header.tsx","components/NavBar/FriendItem/FriendItem.tsx","components/NavBar/NavBar.tsx","App.tsx","routes.tsx","index.tsx"],"names":["module","exports","UPDATE_NEW_POST_TEXT","ADD_NEW_POST","initialState","userId","newPostText","posts","id","text","time","Date","likes","SELECT_DIALOG","UPDATE_NEW_MESSAGE_TEXT","ADD_NEW_MESSAGE","selectedDialog","selectedMessages","newMessageText","userDialogs","name","avatar","userMessages","message","firstName","lastName","surName","background","birthDate","city","education","website","combineReducers","user","state","friends","action","type","types","newPost","postId","postTime","newText","dialogs","find","item","selectDialogId","newMessage","date","newMessages","store","createStore","rootReducers","getRandomColour","rand","Math","random","round","Avatar","React","memo","avatarUrl","size","shape","backgroundImage","backgroundColor","className","s","join","style","UserInfo","info","description","userInfo","userName","websiteLink","href","FormButton","primary","value","position","mode","formButton","NewPost","changeNewPostTextCallback","addNewPostCallback","newPostContainer","onSubmit","event","preventDefault","rows","placeholder","onChange","currentTarget","onKeyPress","key","PostItem","getDate","month","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","humanDate","postItem","container","dateTime","reaction","Posts","userPosts","mappedPosts","useMemo","map","post","postsContainer","title","Profile","profile","image","ProfileContainer","connect","dispatch","actions","v1","ProfilePage","Dialog","dialog","selectDialogCallback","onClick","link","to","activeClassName","active","Message","userMode","itemContainerMode","userItemContainer","friendItemContainer","humanTime","itemContainer","messageContainer","NewMessage","changeNewMessageTextCallback","triggerAddNewMessage","newMessageContainer","form","Messages","messages","friend","addNewMessageToDialogCallback","mappedMessages","messagesContainer","Dialogs","mappedDialogs","list","DialogsContainer","dialogId","updateNewMessageText","DialogsPage","NewsPage","console","log","MusicPage","SettingsPage","Header","header","src","alt","FriendItem","friendContainer","friendName","nav","NavBar","mappedNavigation","toLowerCase","mappedFriends","Object","values","friendsContainer","App","routes","path","ReactDOM","render","StrictMode","getState","document","getElementById"],"mappings":"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","file":"static/js/main.3d3d536d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"UserInfo_info__2EQyR\",\"description\":\"UserInfo_description__14juR\",\"userName\":\"UserInfo_userName__11PxP\",\"userInfo\":\"UserInfo_userInfo__19Gg7\",\"websiteLink\":\"UserInfo_websiteLink__3D7ka\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemContainer\":\"Message_itemContainer__3Ogp1\",\"userItemContainer\":\"Message_userItemContainer__L8nc4\",\"messageContainer\":\"Message_messageContainer__50BSK\",\"friendItemContainer\":\"Message_friendItemContainer__30-yD\",\"userName\":\"Message_userName__1inz4\",\"message\":\"Message_message__2XMh9\",\"time\":\"Message_time__R0PKs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postItem\":\"PostItem_postItem__cJGuU\",\"container\":\"PostItem_container__2JWlg\",\"title\":\"PostItem_title__3ciLf\",\"text\":\"PostItem_text__1-F9Y\",\"date\":\"PostItem_date__2_aLQ\",\"reaction\":\"PostItem_reaction__3faHJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__1FWUI\",\"item\":\"NavBar_item__2RAQQ\",\"link\":\"NavBar_link__2Iixg\",\"active\":\"NavBar_active__1HRI5\",\"friendsContainer\":\"NavBar_friendsContainer__3dQug\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formButton\":\"FormButton_formButton__3Y9lb\",\"primary\":\"FormButton_primary__1Vw-K\",\"secondary\":\"FormButton_secondary__2WLr0\",\"start\":\"FormButton_start__oYJER\",\"center\":\"FormButton_center__2BNk0\",\"end\":\"FormButton_end__le1rA\",\"stretch\":\"FormButton_stretch__AiuYc\",\"small\":\"FormButton_small__3X9yO\",\"medium\":\"FormButton_medium__3A7Ff\",\"large\":\"FormButton_large__3YqLg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Dialogs_container__2p0uA\",\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"list\":\"Dialogs_list__3m0__\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Avatar_avatar__2A8Ju\",\"round\":\"Avatar_round__2hSiZ\",\"square\":\"Avatar_square__3sTiD\",\"small\":\"Avatar_small__3X69T\",\"medium\":\"Avatar_medium__1gMp0\",\"large\":\"Avatar_large__ou5Nn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Dialog_item__2jaF4\",\"link\":\"Dialog_link__2CIRa\",\"active\":\"Dialog_active__2fc4o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newMessageContainer\":\"NewMessage_newMessageContainer__O9LOI\",\"form\":\"NewMessage_form__1LYM4\",\"newMessageText\":\"NewMessage_newMessageText__1H5T9\",\"button\":\"NewMessage_button__YNSf_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPostContainer\":\"NewPost_newPostContainer__1vaC7\",\"title\":\"NewPost_title__2nRLX\",\"text\":\"NewPost_text__1eobX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsContainer\":\"Posts_postsContainer__3fBmN\",\"title\":\"Posts_title__23BoN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__3dzvr\",\"image\":\"Profile_image__2MW_9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\",\"image\":\"Header_image__1zcEI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendContainer\":\"FriendItem_friendContainer__312yD\",\"friendName\":\"FriendItem_friendName__1VsdD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messagesContainer\":\"Messages_messagesContainer__3RCBn\"};","export const UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT'\nexport const ADD_NEW_POST = 'ADD-NEW-POST'","import * as types from '../types/posts'\nimport * as postsActions from '../actions/posts'\n\nexport type PostType = {\n    id: string\n    text: string\n    time: Date\n    likes: number\n}\n\nexport type PostsType = {\n    userId: string\n    newPostText: string\n    posts: Array<PostType>\n}\n\nexport type UpdateNewPostTextType = ReturnType<typeof postsActions.updateNewPostText>\nexport type AddNewPostType = ReturnType<typeof postsActions.addNewPost>\nexport type ActionPostsType = AddNewPostType | UpdateNewPostTextType\n\nconst initialState: PostsType = {\n    userId: '0',\n    newPostText: '',\n    posts: [\n        {\n            id: 'ccc',\n            text: 'В новой записи вы решили уточнить точное время дня (а точнее ночи), когда именно была сделана запись. Строку со временем можно оставить просто текстом, но есть вариант получше. В HTML есть специальный тег для разметки даты и времени',\n            time: new Date(`2021-07-18T15:07:55.582Z`),\n            likes: 3,\n\n        },\n        {\n            id: 'vvv',\n            text: 'Инструменты для статической типизации, такие как Flow или TypeScript, позволяют отлавливать большую часть ошибок ещё до исполнения кода. Кроме того, они существенно улучшают процессы разработки, добавляя автодополнение и другие возможности. Для приложений с большой кодовой базой мы рекомендуем использовать Flow или TypeScript вместо PropTypes.',\n            time: new Date(`2021-07-18T18:07:13.943Z`),\n            likes: 20,\n        },\n        {\n            id: 'lll',\n            text: 'Flow — это библиотека для статической типизации JavaScript, разработанная в Facebook и часто применяемая в связке с React. Flow расширяет возможности JavaScript, добавляя аннотации типов для переменных, функций и React-компонентов.',\n            time: new Date(`2021-07-18T18:38:10.515Z`),\n            likes: 11,\n        },\n    ],\n}\n\nexport const postsReducer = (state: PostsType = initialState, action: ActionPostsType): PostsType => {\n    switch (action.type) {\n        case types.ADD_NEW_POST: // добавить новый пост на страницу профиля\n            const newPost = {\n                id: action.postId,\n                text: state.newPostText,\n                time: action.postTime,\n                likes: 0,\n            }\n            return {\n                ...state,\n                posts: [newPost, ...state.posts],\n                newPostText: '',\n            }\n        case types.UPDATE_NEW_POST_TEXT: // изменить текст поста на странице профиля\n            return {\n                ...state,\n                newPostText: action.newText,\n            }\n        default:\n            return state\n    }\n}","export const SELECT_DIALOG = 'SELECT-DIALOG'\nexport const UPDATE_NEW_MESSAGE_TEXT = 'UPDATE-NEW-MESSAGE-TEXT'\nexport const ADD_NEW_MESSAGE = 'ADD-NEW-MESSAGE'","import * as types from '../types/dialogs'\nimport * as dialogsActions from '../actions/dialogs'\n\nexport type DialogType = {\n    id: string\n    name: string\n    avatar: string\n}\n\nexport type UserMessageType = {\n    id: string\n    message: string\n    time: Date\n}\n\nexport type UsersMessagesType = {\n    [ key: string ]: Array<UserMessageType>\n}\n\nexport type DialogsType = {\n    selectedDialog: DialogType | null\n    selectedMessages: Array<UserMessageType> | null\n    newMessageText: string\n    userDialogs: Array<DialogType>\n    userMessages: UsersMessagesType\n}\n\nexport type SelectDialogType = ReturnType<typeof dialogsActions.selectDialog>\nexport type UpdateNewMessageTextType = ReturnType<typeof dialogsActions.updateNewMessageText>\nexport type AddNewMessageType = ReturnType<typeof dialogsActions.addNewMessage>\nexport type ActionDialogsType = SelectDialogType | UpdateNewMessageTextType | AddNewMessageType\n\nconst initialState: DialogsType = {\n    selectedDialog: null,\n    selectedMessages: null,\n    newMessageText: '',\n    userDialogs: [\n        {\n            id: '0',\n            name: 'John',\n            avatar: 'https://sun9-74.userapi.com/Ph-WiuOtF985il9AvN9JqiCWedmHtSGSSTXrSA/ltEB2Z2-YO4.jpg',\n        },\n        {\n            id: '1',\n            name: 'Sara',\n            avatar: 'https://sun9-74.userapi.com/Ph-WiuOtF985il9AvN9JqiCWedmHtSGSSTXrSA/ltEB2Z2-YO4.jpg',\n        },\n        {\n            id: '2',\n            name: 'George',\n            avatar: 'https://sun9-74.userapi.com/Ph-WiuOtF985il9AvN9JqiCWedmHtSGSSTXrSA/ltEB2Z2-YO4.jpg',\n        },\n        {\n            id: '3',\n            name: 'Jinny',\n            avatar: 'https://sun9-74.userapi.com/Ph-WiuOtF985il9AvN9JqiCWedmHtSGSSTXrSA/ltEB2Z2-YO4.jpg',\n        },\n        {\n            id: '4',\n            name: 'Harry',\n            avatar: 'https://sun9-74.userapi.com/Ph-WiuOtF985il9AvN9JqiCWedmHtSGSSTXrSA/ltEB2Z2-YO4.jpg',\n        },\n    ],\n    userMessages: {\n        '0': [\n            {\n                id: '0',\n                message: 'Hi',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n            {\n                id: 'cscs',\n                message: 'How are you?',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n            {\n                id: '0',\n                message: 'What are you doing now?',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n        ],\n        '1': [\n            {\n                id: '1',\n                message: 'Hello',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n            {\n                id: 'cscs',\n                message: 'Do you wanna go for walks?',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n            {\n                id: '1',\n                message: 'Let\\'s meet at five',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n        ],\n        '2': [\n            {\n                id: '2',\n                message: 'Yo',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n            {\n                id: 'cscs',\n                message: 'Are you sleeping?',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n            {\n                id: '2',\n                message: 'Watch this crazy stuff',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n        ],\n        '3': [\n            {\n                id: '3',\n                message: 'Oh man',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n            {\n                id: 'cscs',\n                message: 'You so mad',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n            {\n                id: '3',\n                message: 'Your task in this kata is to implement a function that calculates the sum of the integers inside a string. For example, in the string \"The30quick20brown10f0x1203jumps914ov3r1349the102l4zy dog\", the sum of the integers is 3635.',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n        ],\n        '4': [\n            {\n                id: '4',\n                message: 'See you later',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n            {\n                id: 'cscs',\n                message: 'Don\\'t forget about our business',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n            {\n                id: '4',\n                message: 'I call you later',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n        ],\n    },\n}\n\nexport const dialogsReducer = (state: DialogsType = initialState, action: ActionDialogsType): DialogsType => {\n    switch (action.type) {\n        case types.SELECT_DIALOG: // выбрать диалог\n            return {\n                ...state,\n                selectedMessages: state.userMessages[ action.id ],\n                selectedDialog: state.userDialogs.find(item => item.id === action.id) || null,\n            }\n        case types.UPDATE_NEW_MESSAGE_TEXT: //изменить текст сообщения\n            return {\n                ...state,\n                newMessageText: action.newText,\n            }\n        case types.ADD_NEW_MESSAGE: //добавить новое сообщение\n            const selectDialogId = state.selectedDialog?.id\n            if (selectDialogId) {\n                const newMessage = {\n                    id: action.id,\n                    message: state.newMessageText,\n                    time: action.date,\n                }\n                const newMessages = [...state.userMessages[ selectDialogId ], newMessage]\n                return {\n                    ...state,\n                    userMessages: {\n                        ...state.userMessages,\n                        [ selectDialogId ]: newMessages,\n                    },\n                    selectedMessages: newMessages,\n                    newMessageText: '',\n                }\n            }\n            return state\n        default:\n            return state\n    }\n}","export type UserType = {\n    id: string\n    firstName: string\n    lastName: string\n    surName: string\n    avatar: string\n    background: string\n    birthDate: string\n    city: string\n    education: string\n    website: string\n}\n\nconst initialState: UserType = {\n    id: 'cscs',\n    firstName: 'John',\n    lastName: 'Dou',\n    surName: '',\n    avatar: 'https://ichef.bbci.co.uk/news/976/cpsprodpb/A7E9/production/_118158924_gettyimages-507245091.jpg',\n    background: 'https://st.depositphotos.com/1522993/4737/v/950/depositphotos_47372005-stock-illustration-orange-blue-background-with-triagles.jpg',\n    birthDate: '2 January 2000',\n    city: 'Minsk',\n    education: 'BSU\\'11',\n    website: 'https://it-kamasutra.com',\n}\n\nexport const userReducer = (state: UserType = initialState, action: any): UserType => {\n    return state\n}","export type FriendType = {\n    id: string\n    name: string\n    avatar: string\n}\n\nexport type FriendsType = {\n    [ key: string ]: FriendType\n}\n\nconst initialState: FriendsType = {\n    '0': {\n        id: '0',\n        name: 'John',\n        avatar: 'https://magazine.skyeng.ru/wp-content/uploads/2019/03/shutterstock_745196731.jpg',\n    },\n    '1': {\n        id: '1',\n        name: 'Sara',\n        avatar: 'https://magazine.skyeng.ru/wp-content/uploads/2019/03/shutterstock_745196731.jpg',\n    },\n    '2': {\n        id: '2',\n        name: 'George',\n        avatar: 'https://magazine.skyeng.ru/wp-content/uploads/2019/03/shutterstock_745196731.jpg',\n    },\n    '3': {\n        id: '3',\n        name: 'Jinny',\n        avatar: 'https://magazine.skyeng.ru/wp-content/uploads/2019/03/shutterstock_745196731.jpg',\n    },\n    '4': {\n        id: '4',\n        name: 'Harry',\n        avatar: 'https://magazine.skyeng.ru/wp-content/uploads/2019/03/shutterstock_745196731.jpg',\n    },\n}\n\nexport const friendsReducer = (state: FriendsType = initialState, action: any): FriendsType => {\n    return state\n}\n\n","import { combineReducers } from 'redux'\nimport { postsReducer } from './posts'\nimport { dialogsReducer } from './dialogs'\nimport { userReducer } from './user'\nimport { friendsReducer } from './friends'\n\nexport default combineReducers({\n    user: userReducer,\n    friends: friendsReducer,\n    posts: postsReducer,\n    dialogs: dialogsReducer,\n})","import { createStore } from 'redux'\nimport rootReducers from './reducers'\nimport { useDispatch } from 'react-redux'\n\nexport const store = createStore(rootReducers)\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatch>()","import React from 'react'\nimport s from './Avatar.module.css'\n\ninterface AvatarProps {\n    avatarUrl?: string\n    size?: 'small' | 'medium' | 'large'\n    shape?: 'square' | 'round'\n}\n\nconst getRandomColour = () => {\n    let rand = 0 - 0.5 + Math.random() * (255 - 0 + 1)\n    return Math.round(rand)\n}\n\nexport const Avatar: React.FC<AvatarProps> = React.memo((\n    {\n        avatarUrl,\n        size = 'medium',\n        shape = 'round',\n    },\n) => {\n    const background = avatarUrl ?\n        { backgroundImage: `url(${ avatarUrl })` } :\n        { backgroundColor: `rgb(${ getRandomColour() }, ${ getRandomColour() }, ${ getRandomColour() })` }\n\n    return (\n        <div\n            className={ [s.avatar, s[ `${ size }` ], s[ `${ shape }` ]].join(' ') }\n            style={ background }\n        ></div>\n    )\n})","import React from 'react'\nimport s from './UserInfo.module.css'\nimport { Avatar } from '../../Avatar/Avatar'\nimport { UserType } from '../../../store/reducers/user'\n\n\ntype PropType = {\n    user: UserType\n}\n\nexport const UserInfo: React.FC<PropType> = React.memo(({ user }) => {\n    const {\n        avatar,\n        firstName,\n        lastName,\n        surName,\n        birthDate,\n        city,\n        education,\n        website,\n    } = user\n    return (\n        <div className={ s.info }>\n            <Avatar avatarUrl={ avatar } shape=\"square\" size=\"large\"/>\n            <div className={ s.description }>\n                <h2 className={ `${ s.userInfo } ${ s.userName }` }>{ `${ firstName } ${ lastName } ${ surName }` }</h2>\n                <p className={ s.userInfo }>{ `Date of Birth: ${ birthDate }` }</p>\n                <p className={ s.userInfo }>{ `City: ${ city }` }</p>\n                <p className={ s.userInfo }>{ `Education: ${ education }` }</p>\n                <p className={ s.userInfo }>Web Site: <a className={ s.websiteLink } href={ website }>{ website }</a>\n                </p>\n            </div>\n        </div>\n    )\n})","import React from 'react'\nimport s from './FormButton.module.css'\n\ninterface FormButtonProps {\n    primary?: boolean\n    value: string\n    size?: 'small' | 'medium' | 'large',\n    position?: 'start' | 'end' | 'center' | 'stretch'\n}\n\nexport const FormButton: React.FC<FormButtonProps> = React.memo((\n    {\n        primary = true,\n        value,\n        size = 'medium',\n        position = 'end',\n    },\n) => {\n    const mode = primary ? 'primary' : 'secondary'\n    return (\n        <input\n            className={ [s.formButton, s[ `${ mode }` ], s[ `${ size }` ], s[ `${ position }` ]].join(' ') }\n            type=\"submit\"\n            value={ value }\n        />\n    )\n})","import React, { FormEvent, ChangeEvent, KeyboardEvent } from 'react'\nimport { FormButton } from '../../../FormButton/FormButton'\nimport s from './NewPost.module.css'\nimport { MapDispatchPropType } from '../../../../Pages/ProfilePage/ProfilePage'\n\ntype NewPostType = {\n    newPostText: string\n} & MapDispatchPropType\n\nexport const NewPost: React.FC<NewPostType> = React.memo((\n    {\n        newPostText,\n        changeNewPostTextCallback, addNewPostCallback,\n    }) => {\n\n    const onSubmit = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n        addNewPostCallback()\n    }\n    const onEnterPress = (event: KeyboardEvent<HTMLTextAreaElement>) => {\n        if (event.key === 'Enter') {\n            event.preventDefault()\n            addNewPostCallback()\n        }\n    }\n\n    const onChangePostText = (event: ChangeEvent<HTMLTextAreaElement>) =>\n        changeNewPostTextCallback(event.currentTarget.value)\n\n    return (\n        <form\n            className={ s.newPostContainer }\n            onSubmit={ onSubmit }\n        >\n            <textarea\n                className={ s.text }\n                rows={ 5 }\n                value={ newPostText }\n                placeholder=\"Write text...\"\n                onChange={ onChangePostText }\n                onKeyPress={ onEnterPress }\n            />\n            <FormButton\n                value=\"Add post\"\n                position=\"end\"\n                primary={ true }\n                size=\"medium\"\n            />\n        </form>\n    )\n})","import React from 'react'\nimport { Avatar } from '../../../Avatar/Avatar'\nimport s from './PostItem.module.css'\n\n\ntype PostItemType = {\n    avatarUrl: string\n    text: string\n    likes: number\n    time: Date\n}\n\nexport const PostItem: React.FC<PostItemType> = React.memo((\n    {\n        avatarUrl,\n        text,\n        time,\n        likes,\n    }) => {\n\n    const date = time.getDate()\n    const month = time.getMonth() + 1 > 9 ? time.getMonth() + 1 : `0${ time.getMonth() + 1 }`\n    const year = time.getFullYear()\n    const hours = time.getHours()\n    const minutes = time.getMinutes() > 9 ? time.getMinutes() : `0${ time.getMinutes() }`\n    const humanDate = `${ date }.${ month }.${ year } ${ hours }:${ minutes }`\n\n    return (\n        <section className={ s.postItem }>\n            <Avatar avatarUrl={ avatarUrl }/>\n            <div className={ s.container }>\n                <article className={ s.text }>{ text }</article>\n                <time\n                    className={ s.date }\n                    dateTime={ `${ time }` }\n                >\n                    { humanDate }\n                </time>\n                <span className={ s.reaction }>likes { likes }</span>\n            </div>\n        </section>\n    )\n})","import React, { useMemo } from 'react'\nimport { NewPost } from './NewPost/NewPost'\nimport { PostItem } from './PostItem/PostItem'\nimport s from './Posts.module.css'\nimport { PostsType } from '../../../store/reducers/posts'\nimport { MapDispatchPropType } from '../../../Pages/ProfilePage/ProfilePage'\n\ntype PostsPropType = {\n    avatar: string\n    userPosts: PostsType\n} & MapDispatchPropType\n\nexport const Posts: React.FC<PostsPropType> = React.memo((\n    {\n        avatar, userPosts,\n        changeNewPostTextCallback, addNewPostCallback,\n    }) => {\n\n    const { posts, newPostText } = userPosts\n    const mappedPosts = useMemo(() => posts.map((post) => {\n        return <PostItem\n            avatarUrl={ avatar }\n            text={ post.text }\n            time={ post.time }\n            likes={ post.likes }\n            key={ post.id }\n        />\n    }), [posts, avatar])\n\n    return (\n        <div className={ s.postsContainer }>\n            <h2 className={ s.title }>My Posts</h2>\n            <NewPost\n                newPostText={ newPostText }\n                addNewPostCallback={ addNewPostCallback }\n                changeNewPostTextCallback={ changeNewPostTextCallback }\n            />\n            { mappedPosts }\n        </div>\n    )\n})","import React from 'react'\nimport { UserInfo } from './UserInfo/UserInfo'\nimport { Posts } from './Posts/Posts'\nimport s from './Profile.module.css'\nimport { MapDispatchPropType, MapStatePropType } from '../../Pages/ProfilePage/ProfilePage'\n\ntype ProfilePropType = MapDispatchPropType & MapStatePropType\n\nexport const Profile: React.FC<ProfilePropType> = React.memo((\n    {\n        user, posts,\n        changeNewPostTextCallback, addNewPostCallback,\n    }) => {\n    return (\n        <main className={ s.profile }>\n            <div\n                className={ s.image }\n                style={ { backgroundImage: `url(${ user.background })` } }\n            ></div>\n            <UserInfo user={ user }/>\n            <Posts\n                avatar={ user.avatar }\n                userPosts={ posts }\n                addNewPostCallback={ addNewPostCallback }\n                changeNewPostTextCallback={ changeNewPostTextCallback }\n            />\n        </main>\n    )\n})","import React from 'react'\nimport { Profile } from '../../components/Profile/Profile'\nimport { PostsType } from '../../store/reducers/posts'\nimport { UserType } from '../../store/reducers/user'\nimport { RootState } from '../../store'\nimport * as actions from '../../store/actions/posts'\nimport { connect } from 'react-redux'\n\nexport type MapStatePropType = {\n    user: UserType\n    posts: PostsType\n}\n\nexport type MapDispatchPropType = {\n    changeNewPostTextCallback: (newText: string) => void\n    addNewPostCallback: () => void\n}\n\nconst mapStateToProps = (state: RootState): MapStatePropType => {\n    return {\n        user: state.user,\n        posts: state.posts,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): MapDispatchPropType => {\n    return {\n        changeNewPostTextCallback: (newText: string) => dispatch(actions.updateNewPostText(newText)),\n        addNewPostCallback: () => dispatch(actions.addNewPost()),\n    }\n}\n\nconst ProfileContainer = connect(mapStateToProps, mapDispatchToProps)(Profile)\n\nexport const ProfilePage = React.memo(() => <ProfileContainer/>)\n","import * as types from '../types/posts'\nimport { v1 } from 'uuid'\n\nexport const updateNewPostText = (newText: string) => ({\n    type: types.UPDATE_NEW_POST_TEXT,\n    newText,\n} as const)\n\nexport const addNewPost = () => ({\n    type: types.ADD_NEW_POST,\n    postId: v1(),\n    postTime: new Date(),\n} as const)","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport s from './Dialog.module.css'\nimport { DialogType } from '../../../store/reducers/dialogs'\n\ntype PropTypes = {\n    dialog: DialogType\n    selectDialogCallback: (id: string) => void\n}\n\nexport const Dialog: React.FC<PropTypes> = React.memo((\n    {\n        dialog, selectDialogCallback,\n    }) => {\n    const onSelectDialog = () => selectDialogCallback(dialog.id)\n\n    return (\n        <li\n            className={ s.item }\n            onClick={ onSelectDialog }\n        >\n            <NavLink\n                className={ s.link }\n                to={ `/dialogs/${ dialog.id }` }\n                activeClassName={ s.active }\n            >\n                { dialog.name }\n            </NavLink>\n        </li>\n    )\n})","import React from 'react'\nimport { Avatar } from '../../../Avatar/Avatar'\nimport s from './Message.module.css'\nimport { UserMessageType } from '../../../../store/reducers/dialogs'\n\n\ntype PropTypes = {\n    userMode: boolean\n    name: string\n    message: UserMessageType\n    avatar: string | undefined\n}\n\nexport const Message: React.FC<PropTypes> = React.memo((\n    {\n        userMode,\n        name,\n        message,\n        avatar,\n    }) => {\n    const itemContainerMode = userMode ? `${ s.userItemContainer }` : `${ s.friendItemContainer }`\n    const humanTime = `\n        ${ message.time.getHours() }:${ message.time.getMinutes() < 10\n        ? `0${ message.time.getMinutes() }`\n        : message.time.getMinutes() }\n    `\n\n    return (\n        <div className={ [s.itemContainer, itemContainerMode].join(' ') }>\n            <Avatar avatarUrl={ avatar } size=\"small\" shape=\"round\"/>\n            <div className={ s.messageContainer }>\n                <div>\n                    <p className={ s.userName }>{ name }</p>\n                    <p className={ s.message }>{ message.message }</p>\n                </div>\n                <span className={ s.time }>{ humanTime }</span>\n            </div>\n        </div>\n    )\n})\n","import React, { ChangeEvent, FormEvent } from 'react'\nimport s from './NewMessage.module.css'\nimport { FormButton } from '../../../FormButton/FormButton'\n\ntype NewMessageType = {\n    newMessageText: string\n    changeNewMessageTextCallback: (newText: string) => void\n    triggerAddNewMessage: () => void\n}\n\nexport const NewMessage: React.FC<NewMessageType> = React.memo((\n    {\n        newMessageText,\n        changeNewMessageTextCallback,\n        triggerAddNewMessage,\n    }) => {\n\n    const onSubmit = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n        triggerAddNewMessage()\n    }\n\n    const onChangeMessageText = (event: ChangeEvent<HTMLTextAreaElement>) => {\n        changeNewMessageTextCallback(event.currentTarget.value)\n    }\n\n    return (\n        <div className={ s.newMessageContainer }>\n            <form\n                className={ s.form }\n                onSubmit={ onSubmit }\n            >\n                <textarea\n                    className={ s.newMessageText }\n                    rows={ 1 }\n                    value={ newMessageText }\n                    placeholder=\"Write message...\"\n                    onChange={ onChangeMessageText }\n                />\n                <FormButton value=\"Send\" position=\"stretch\" primary={ true } size=\"medium\"/>\n            </form>\n        </div>\n    )\n})","import React, { useMemo } from 'react'\nimport { Message } from './Message/Message'\nimport { NewMessage } from './NewMessage/NewMessage'\nimport s from './Messages.module.css'\nimport { DialogType, UserMessageType } from '../../../store/reducers/dialogs'\nimport { UserType } from '../../../store/reducers/user'\n\ntype PropTypes = {\n    messages: Array<UserMessageType>\n    friend: DialogType\n    newMessageText: string\n    user: UserType\n    changeNewMessageTextCallback: (newText: string) => void\n    addNewMessageToDialogCallback: (userId: string) => void\n}\n\nexport const Messages: React.FC<PropTypes> = React.memo((\n    {\n        messages, friend, newMessageText,\n        user,\n        changeNewMessageTextCallback, addNewMessageToDialogCallback,\n    }) => {\n    const mappedMessages = useMemo(() => messages.map((message: UserMessageType, id) => {\n        const name = message.id === user.id ? user.firstName : friend.name\n        const avatar = message.id === user.id ? user.avatar : friend.avatar\n        const userMode = message.id === user.id\n        return < Message\n            key={ id }\n            userMode={ userMode }\n            name={ name }\n            message={ message }\n            avatar={ avatar }\n        />\n    }), [messages, user, friend])\n\n    const triggerAddNewMessage = () => addNewMessageToDialogCallback(user.id)\n\n    return (\n        <div className={ s.messagesContainer }>\n            { mappedMessages }\n            <NewMessage\n                newMessageText={ newMessageText }\n                changeNewMessageTextCallback={ changeNewMessageTextCallback }\n                triggerAddNewMessage={ triggerAddNewMessage }\n            />\n        </div>\n    )\n})","import React, { useMemo } from 'react'\nimport { Dialog } from './Dialog/Dialog'\nimport { Messages } from './Messages/Messages'\nimport s from './Dialogs.module.css'\nimport { DialogType } from '../../store/reducers/dialogs'\nimport { MapDispatchPropType, MapStatePropType } from '../../Pages/DialogsPage/DialogsPage'\n\ntype PropTypes = MapStatePropType & MapDispatchPropType\n\nexport const Dialogs: React.FC<PropTypes> = React.memo((\n    {\n        dialogs, user,\n        selectDialogCallback, changeNewMessageTextCallback,\n        addNewMessageToDialogCallback,\n    }) => {\n    const { userDialogs, selectedMessages, selectedDialog, newMessageText } = dialogs\n\n    const mappedDialogs = useMemo(() => userDialogs.map((dialog: DialogType) => (\n        <Dialog\n            dialog={ dialog }\n            selectDialogCallback={ selectDialogCallback }\n            key={ dialog.id }\n        />\n    )), [userDialogs, selectDialogCallback])\n\n    return (\n        <div className={ s.container }>\n            <div className={ s.dialogs }>\n                <ul className={ s.list }>\n                    { mappedDialogs }\n                </ul>\n            </div>\n            <div className={ s.messages }>\n                { selectedDialog && selectedMessages\n                    ? <Messages\n                        messages={ selectedMessages }\n                        friend={ selectedDialog }\n                        newMessageText={ newMessageText }\n                        user={ user }\n                        changeNewMessageTextCallback={ changeNewMessageTextCallback }\n                        addNewMessageToDialogCallback={ addNewMessageToDialogCallback }\n                    />\n                    : 'Select dialog' }\n            </div>\n        </div>\n    )\n})","import React from 'react'\nimport { Dialogs } from '../../components/Dialogs/Dialogs'\nimport { addNewMessage, selectDialog, updateNewMessageText } from '../../store/actions/dialogs'\nimport { UserType } from '../../store/reducers/user'\nimport { RootState } from '../../store'\nimport { DialogsType } from '../../store/reducers/dialogs'\nimport { connect } from 'react-redux'\n\nexport type MapStatePropType = {\n    user: UserType\n    dialogs: DialogsType\n}\n\nexport type MapDispatchPropType = {\n    selectDialogCallback: (dialogId: string) => void\n    changeNewMessageTextCallback: (newText: string) => void\n    addNewMessageToDialogCallback: (userId: string) => void\n}\n\nconst mapStateToProps = (state: RootState): MapStatePropType => {\n    return {\n        user: state.user,\n        dialogs: state.dialogs,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): MapDispatchPropType => {\n    return {\n        selectDialogCallback: (dialogId: string) => dispatch(selectDialog(dialogId)),\n        changeNewMessageTextCallback: (newText: string) => dispatch(updateNewMessageText(newText)),\n        addNewMessageToDialogCallback: (userId) => dispatch(addNewMessage(userId)),\n    }\n}\n\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)\n\nexport const DialogsPage = React.memo(() => <DialogsContainer/>)","import * as types from '../types/dialogs'\n\nexport const selectDialog = (id: string) => ({\n    type: types.SELECT_DIALOG,\n    id,\n} as const)\n\nexport const updateNewMessageText = (newText: string) => ({\n    type: types.UPDATE_NEW_MESSAGE_TEXT,\n    newText,\n} as const)\n\nexport const addNewMessage = (id: string) => ({\n    type: types.ADD_NEW_MESSAGE,\n    id,\n    date: new Date(),\n} as const)","import React from 'react'\n\nexport const NewsPage = React.memo(() => {\n    console.log('newsPage')\n    return (\n        <>\n            NewsPage\n        </>\n    )\n})","import React from 'react'\n\nexport const MusicPage = React.memo(() => {\n    console.log('musicPage')\n    return (\n        <>\n            MusicPage\n        </>\n    )\n})","import React from 'react'\n\nexport const SettingsPage = React.memo(() => {\n    console.log('settingsPage')\n    return (\n        <>\n            SettingsPage\n        </>\n    )\n})","import React from \"react\"\nimport s from './Header.module.css'\n\nexport const Header = () => {\n    return (\n        <header className={s.header}>\n            <img\n                className={s.image}\n                src=\"https://img.icons8.com/ios-filled/50/000000/logo.png\"\n                alt=\"logo\"\n            />\n            <h1>Такая-то сеть</h1>\n        </header>\n    )\n}","import React from 'react'\nimport { Avatar } from '../../Avatar/Avatar'\nimport s from './FriendItem.module.css'\nimport { FriendType } from '../../../store/reducers/friends'\n\ntype PropTypes = {\n    friend: FriendType\n}\n\nexport const FriendItem: React.FC<PropTypes> = React.memo(({ friend }) => {\n    const { name, avatar } = friend\n    return (\n        <div className={ s.friendContainer }>\n            <span className={ s.friendName }>{ name }</span>\n            <Avatar avatarUrl={ avatar } shape=\"round\" size=\"medium\"/>\n        </div>\n    )\n})","import React, { useMemo } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { FriendItem } from './FriendItem/FriendItem'\nimport s from './NavBar.module.css'\nimport { FriendsType } from '../../store/reducers/friends'\n\n\ntype NavItemType = {\n    id: number\n    name: string\n}\ntype NavType = Array<NavItemType>\n\ntype PropType = {\n    friends: FriendsType\n}\n\nconst nav: NavType = [\n    { id: 0, name: 'Profile' },\n    { id: 1, name: 'Dialogs' },\n    { id: 2, name: 'News' },\n    { id: 3, name: 'Music' },\n    { id: 4, name: 'Settings' },\n]\n\nexport const NavBar: React.FC<PropType> = React.memo(({ friends }) => {\n    const mappedNavigation = useMemo(() => nav.map((item) => (\n        <div className={ s.item } key={ item.id }>\n            <NavLink\n                to={ `/${ item.name.toLowerCase() }` }\n                className={ s.link }\n                activeClassName={ s.active }\n            >{ item.name }</NavLink>\n        </div>\n    )), [])\n\n    const mappedFriends = useMemo(() => Object.values(friends).map((friend) => (\n        <FriendItem\n            friend={ friend }\n            key={ friend.id }\n        />\n    )), [friends])\n\n\n    return (\n        <nav className={ s.nav }>\n            { mappedNavigation }\n            <div className={ s.friendsContainer }>\n                { mappedFriends }\n            </div>\n        </nav>\n    )\n})","import React from 'react'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { useRoutes } from './routes'\nimport { Header } from './components/Header/Header'\nimport { NavBar } from './components/NavBar/NavBar'\nimport './App.css'\nimport { RootState } from './store'\n\nexport type AppTypes = {\n    state: RootState\n}\n\nexport const App: React.FC<AppTypes> = (\n    {\n        state,\n    }) => {\n    const { friends } = state\n    const routes = useRoutes()\n    return (\n        <Router>\n            <div className=\"app-wrapper\">\n                <Header/>\n                <NavBar friends={ friends }/>\n                { routes }\n            </div>\n        </Router>\n    )\n}\n","import React from 'react'\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport { ProfilePage } from './Pages/ProfilePage/ProfilePage'\nimport { DialogsPage } from './Pages/DialogsPage/DialogsPage'\nimport { NewsPage } from './Pages/NewsPage/NewsPage'\nimport { MusicPage } from './Pages/MusicPage/MusicPage'\nimport { SettingsPage } from './Pages/SettingsPage/SettingsPage'\n\nexport const useRoutes = () => {\n    return (\n        <Switch>\n            <Route path=\"/profile\">\n                <ProfilePage/>\n            </Route>\n            <Route path=\"/dialogs\">\n                <DialogsPage/>\n            </Route>\n            <Route path=\"/news\">\n                <NewsPage/>\n            </Route>\n            <Route path=\"/music\">\n                <MusicPage/>\n            </Route>\n            <Route path=\"/settings\">\n                <SettingsPage/>\n            </Route>\n            <Redirect to=\"/profile\"/>\n        </Switch>\n    )\n}","import './index.css'\nimport { store } from './store'\nimport ReactDOM from 'react-dom'\nimport React from 'react'\nimport { App } from './App'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={ store }>\n            <App state={ store.getState() }/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n)"],"sourceRoot":""}