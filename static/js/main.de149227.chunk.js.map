{"version":3,"sources":["components/Profile/UserInfo/UserInfo.module.css","components/Users/UsersItem/UsersItem.module.css","components/Dialogs/Messages/Message/Message.module.css","components/Profile/Posts/PostItem/PostItem.module.css","components/Dialogs/Dialogs.module.css","components/NavBar/NavBar.module.css","components/FormButton/FormButton.module.css","components/Avatar/Avatar.module.css","components/Dialogs/Dialog/Dialog.module.css","components/Dialogs/Messages/NewMessage/NewMessage.module.css","components/Users/Users.module.css","components/Profile/Posts/NewPost/NewPost.module.css","components/Profile/Posts/Posts.module.css","components/Profile/Profile.module.css","components/Header/Header.module.css","components/NavBar/FriendItem/FriendItem.module.css","components/Dialogs/Messages/Messages.module.css","store/types/posts.tsx","store/reducers/posts.ts","store/types/dialogs.tsx","store/reducers/dialogs.ts","store/reducers/user.ts","store/reducers/friends.ts","store/types/users.ts","store/reducers/users.ts","store/reducers/index.ts","store/index.ts","components/Avatar/Avatar.tsx","components/Profile/UserInfo/UserInfo.tsx","components/FormButton/FormButton.tsx","components/Profile/Posts/NewPost/NewPost.tsx","components/Profile/Posts/PostItem/PostItem.tsx","components/Profile/Posts/Posts.tsx","components/Profile/Profile.tsx","Pages/ProfilePage/ProfilePage.tsx","store/actions/posts.tsx","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Messages/Message/Message.tsx","components/Dialogs/Messages/NewMessage/NewMessage.tsx","components/Dialogs/Messages/Messages.tsx","components/Dialogs/Dialogs.tsx","Pages/DialogsPage/DialogsPage.tsx","store/actions/dialogs.tsx","Pages/NewsPage/NewsPage.tsx","Pages/MusicPage/MusicPage.tsx","Pages/SettingsPage/SettingsPage.tsx","components/Users/UsersItem/UsersItem.tsx","components/Users/Users.tsx","Pages/UsersPage.tsx","store/actions/users.ts","components/Header/Header.tsx","components/NavBar/FriendItem/FriendItem.tsx","components/NavBar/NavBar.tsx","App.tsx","routes.tsx","index.tsx"],"names":["module","exports","UPDATE_NEW_POST_TEXT","ADD_NEW_POST","initialState","userId","newPostText","posts","id","text","time","Date","likes","SELECT_DIALOG","UPDATE_NEW_MESSAGE_TEXT","ADD_NEW_MESSAGE","selectedDialog","selectedMessages","newMessageText","userDialogs","name","avatar","userMessages","message","firstName","lastName","surName","background","birthDate","city","education","website","CHANGE_FOLLOW","SET_USERS","v1","userAvatar","userFullName","userStatus","userLocation","country","followed","combineReducers","user","state","friends","action","type","types","newPost","postId","postTime","newText","dialogs","find","item","selectDialogId","newMessage","date","newMessages","users","map","payload","store","createStore","rootReducers","getRandomColour","rand","Math","random","round","Avatar","React","memo","avatarUrl","size","shape","backgroundImage","backgroundColor","className","s","join","style","UserInfo","info","description","userInfo","userName","websiteLink","href","FormButton","primary","value","position","mode","formButton","NewPost","changeNewPostTextCallback","addNewPostCallback","newPostContainer","onSubmit","event","preventDefault","rows","placeholder","onChange","currentTarget","onKeyPress","key","PostItem","getDate","month","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","humanDate","postItem","container","dateTime","reaction","Posts","userPosts","mappedPosts","useMemo","post","postsContainer","title","Profile","profile","image","ProfileContainer","connect","dispatch","actions","ProfilePage","Dialog","dialog","selectDialogCallback","onClick","link","to","activeClassName","active","Message","userMode","itemContainerMode","userItemContainer","friendItemContainer","humanTime","itemContainer","messageContainer","NewMessage","changeNewMessageTextCallback","triggerAddNewMessage","newMessageContainer","form","Messages","messages","friend","addNewMessageToDialogCallback","mappedMessages","messagesContainer","Dialogs","mappedDialogs","list","DialogsContainer","dialogId","updateNewMessageText","DialogsPage","NewsPage","console","log","MusicPage","SettingsPage","UsersItem","changeFollowCallback","followContainer","userInfoContainer","userInfoFullName","userInfoStatus","userLocationContainer","userLocationCountry","userLocationCity","Users","mappedUsersItem","setUsersCallback","UsersPageContainer","UsersContainer","UsersPage","Header","header","src","alt","FriendItem","friendContainer","friendName","nav","NavBar","mappedNavigation","toLowerCase","mappedFriends","Object","values","friendsContainer","App","routes","path","ReactDOM","render","StrictMode","getState","document","getElementById"],"mappings":"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","file":"static/js/main.de149227.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"UserInfo_info__2EQyR\",\"description\":\"UserInfo_description__14juR\",\"userName\":\"UserInfo_userName__11PxP\",\"userInfo\":\"UserInfo_userInfo__19Gg7\",\"websiteLink\":\"UserInfo_websiteLink__3D7ka\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userItemContainer\":\"UsersItem_userItemContainer__25c_a\",\"followContainer\":\"UsersItem_followContainer__3ZPGQ\",\"userInfoContainer\":\"UsersItem_userInfoContainer__3khJi\",\"userInfoFullName\":\"UsersItem_userInfoFullName__1dTRO\",\"userInfoStatus\":\"UsersItem_userInfoStatus__3i0_t\",\"userLocationContainer\":\"UsersItem_userLocationContainer__3vZyU\",\"userLocationCountry\":\"UsersItem_userLocationCountry__3wHWM\",\"userLocationCity\":\"UsersItem_userLocationCity__2Hr13\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemContainer\":\"Message_itemContainer__3Ogp1\",\"userItemContainer\":\"Message_userItemContainer__L8nc4\",\"messageContainer\":\"Message_messageContainer__50BSK\",\"friendItemContainer\":\"Message_friendItemContainer__30-yD\",\"userName\":\"Message_userName__1inz4\",\"message\":\"Message_message__2XMh9\",\"time\":\"Message_time__R0PKs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postItem\":\"PostItem_postItem__cJGuU\",\"container\":\"PostItem_container__2JWlg\",\"title\":\"PostItem_title__3ciLf\",\"text\":\"PostItem_text__1-F9Y\",\"date\":\"PostItem_date__2_aLQ\",\"reaction\":\"PostItem_reaction__3faHJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Dialogs_container__2p0uA\",\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"list\":\"Dialogs_list__3m0__\",\"info\":\"Dialogs_info__3vu_m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__1FWUI\",\"item\":\"NavBar_item__2RAQQ\",\"link\":\"NavBar_link__2Iixg\",\"active\":\"NavBar_active__1HRI5\",\"friendsContainer\":\"NavBar_friendsContainer__3dQug\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formButton\":\"FormButton_formButton__3Y9lb\",\"primary\":\"FormButton_primary__1Vw-K\",\"secondary\":\"FormButton_secondary__2WLr0\",\"start\":\"FormButton_start__oYJER\",\"center\":\"FormButton_center__2BNk0\",\"end\":\"FormButton_end__le1rA\",\"stretch\":\"FormButton_stretch__AiuYc\",\"small\":\"FormButton_small__3X9yO\",\"medium\":\"FormButton_medium__3A7Ff\",\"large\":\"FormButton_large__3YqLg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Avatar_avatar__2A8Ju\",\"round\":\"Avatar_round__2hSiZ\",\"square\":\"Avatar_square__3sTiD\",\"small\":\"Avatar_small__3X69T\",\"medium\":\"Avatar_medium__1gMp0\",\"large\":\"Avatar_large__ou5Nn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Dialog_item__2jaF4\",\"link\":\"Dialog_link__2CIRa\",\"active\":\"Dialog_active__2fc4o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newMessageContainer\":\"NewMessage_newMessageContainer__O9LOI\",\"form\":\"NewMessage_form__1LYM4\",\"newMessageText\":\"NewMessage_newMessageText__1H5T9\",\"button\":\"NewMessage_button__YNSf_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"Users_users__2Iv27\",\"UsersPageContainer\":\"Users_UsersPageContainer__3x8h8\",\"UsersContainer\":\"Users_UsersContainer__2PbJ6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPostContainer\":\"NewPost_newPostContainer__1vaC7\",\"title\":\"NewPost_title__2nRLX\",\"text\":\"NewPost_text__1eobX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsContainer\":\"Posts_postsContainer__3fBmN\",\"title\":\"Posts_title__23BoN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__3dzvr\",\"image\":\"Profile_image__2MW_9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\",\"image\":\"Header_image__1zcEI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendContainer\":\"FriendItem_friendContainer__312yD\",\"friendName\":\"FriendItem_friendName__1VsdD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messagesContainer\":\"Messages_messagesContainer__3RCBn\"};","export const UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT'\nexport const ADD_NEW_POST = 'ADD-NEW-POST'","import * as types from '../types/posts'\nimport * as postsActions from '../actions/posts'\n\nexport type PostType = {\n    id: string\n    text: string\n    time: Date\n    likes: number\n}\n\nexport type PostsType = {\n    userId: string\n    newPostText: string\n    posts: Array<PostType>\n}\n\nexport type UpdateNewPostTextType = ReturnType<typeof postsActions.updateNewPostText>\nexport type AddNewPostType = ReturnType<typeof postsActions.addNewPost>\nexport type ActionPostsType = AddNewPostType | UpdateNewPostTextType\n\nconst initialState: PostsType = {\n    userId: '0',\n    newPostText: '',\n    posts: [\n        {\n            id: 'ccc',\n            text: 'В новой записи вы решили уточнить точное время дня (а точнее ночи), когда именно была сделана запись. Строку со временем можно оставить просто текстом, но есть вариант получше. В HTML есть специальный тег для разметки даты и времени',\n            time: new Date(`2021-07-18T15:07:55.582Z`),\n            likes: 3,\n\n        },\n        {\n            id: 'vvv',\n            text: 'Инструменты для статической типизации, такие как Flow или TypeScript, позволяют отлавливать большую часть ошибок ещё до исполнения кода. Кроме того, они существенно улучшают процессы разработки, добавляя автодополнение и другие возможности. Для приложений с большой кодовой базой мы рекомендуем использовать Flow или TypeScript вместо PropTypes.',\n            time: new Date(`2021-07-18T18:07:13.943Z`),\n            likes: 20,\n        },\n        {\n            id: 'lll',\n            text: 'Flow — это библиотека для статической типизации JavaScript, разработанная в Facebook и часто применяемая в связке с React. Flow расширяет возможности JavaScript, добавляя аннотации типов для переменных, функций и React-компонентов.',\n            time: new Date(`2021-07-18T18:38:10.515Z`),\n            likes: 11,\n        },\n    ],\n}\n\nexport const postsReducer = (state: PostsType = initialState, action: ActionPostsType): PostsType => {\n    switch (action.type) {\n        case types.ADD_NEW_POST: // добавить новый пост на страницу профиля\n            const newPost = {\n                id: action.postId,\n                text: state.newPostText,\n                time: action.postTime,\n                likes: 0,\n            }\n            return {\n                ...state,\n                posts: [newPost, ...state.posts],\n                newPostText: '',\n            }\n        case types.UPDATE_NEW_POST_TEXT: // изменить текст поста на странице профиля\n            return {\n                ...state,\n                newPostText: action.newText,\n            }\n        default:\n            return state\n    }\n}","export const SELECT_DIALOG = 'SELECT-DIALOG'\nexport const UPDATE_NEW_MESSAGE_TEXT = 'UPDATE-NEW-MESSAGE-TEXT'\nexport const ADD_NEW_MESSAGE = 'ADD-NEW-MESSAGE'","import * as types from '../types/dialogs'\nimport * as dialogsActions from '../actions/dialogs'\n\nexport type DialogType = {\n    id: string\n    name: string\n    avatar: string\n}\n\nexport type UserMessageType = {\n    id: string\n    message: string\n    time: Date\n}\n\nexport type UsersMessagesType = {\n    [ key: string ]: Array<UserMessageType>\n}\n\nexport type DialogsType = {\n    selectedDialog: DialogType | null\n    selectedMessages: Array<UserMessageType> | null\n    newMessageText: string\n    userDialogs: Array<DialogType>\n    userMessages: UsersMessagesType\n}\n\nexport type SelectDialogType = ReturnType<typeof dialogsActions.selectDialog>\nexport type UpdateNewMessageTextType = ReturnType<typeof dialogsActions.updateNewMessageText>\nexport type AddNewMessageType = ReturnType<typeof dialogsActions.addNewMessage>\nexport type ActionDialogsType = SelectDialogType | UpdateNewMessageTextType | AddNewMessageType\n\nconst initialState: DialogsType = {\n    selectedDialog: null,\n    selectedMessages: null,\n    newMessageText: '',\n    userDialogs: [\n        {\n            id: '0',\n            name: 'John',\n            avatar: 'https://sun9-74.userapi.com/Ph-WiuOtF985il9AvN9JqiCWedmHtSGSSTXrSA/ltEB2Z2-YO4.jpg',\n        },\n        {\n            id: '1',\n            name: 'Sara',\n            avatar: 'https://sun9-74.userapi.com/Ph-WiuOtF985il9AvN9JqiCWedmHtSGSSTXrSA/ltEB2Z2-YO4.jpg',\n        },\n        {\n            id: '2',\n            name: 'George',\n            avatar: 'https://sun9-74.userapi.com/Ph-WiuOtF985il9AvN9JqiCWedmHtSGSSTXrSA/ltEB2Z2-YO4.jpg',\n        },\n        {\n            id: '3',\n            name: 'Jinny',\n            avatar: 'https://sun9-74.userapi.com/Ph-WiuOtF985il9AvN9JqiCWedmHtSGSSTXrSA/ltEB2Z2-YO4.jpg',\n        },\n        {\n            id: '4',\n            name: 'Harry',\n            avatar: 'https://sun9-74.userapi.com/Ph-WiuOtF985il9AvN9JqiCWedmHtSGSSTXrSA/ltEB2Z2-YO4.jpg',\n        },\n    ],\n    userMessages: {\n        '0': [\n            {\n                id: '0',\n                message: 'Hi',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n            {\n                id: 'cscs',\n                message: 'How are you?',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n            {\n                id: '0',\n                message: 'What are you doing now?',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n        ],\n        '1': [\n            {\n                id: '1',\n                message: 'Hello',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n            {\n                id: 'cscs',\n                message: 'Do you wanna go for walks?',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n            {\n                id: '1',\n                message: 'Let\\'s meet at five',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n        ],\n        '2': [\n            {\n                id: '2',\n                message: 'Yo',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n            {\n                id: 'cscs',\n                message: 'Are you sleeping?',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n            {\n                id: '2',\n                message: 'Watch this crazy stuff',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n        ],\n        '3': [\n            {\n                id: '3',\n                message: 'Oh man',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n            {\n                id: 'cscs',\n                message: 'You so mad',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n            {\n                id: '3',\n                message: 'Your task in this kata is to implement a function that calculates the sum of the integers inside a string. For example, in the string \"The30quick20brown10f0x1203jumps914ov3r1349the102l4zy dog\", the sum of the integers is 3635.',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n        ],\n        '4': [\n            {\n                id: '4',\n                message: 'See you later',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n            {\n                id: 'cscs',\n                message: 'Don\\'t forget about our business',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n            {\n                id: '4',\n                message: 'I call you later',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n        ],\n    },\n}\n\nexport const dialogsReducer = (state: DialogsType = initialState, action: ActionDialogsType): DialogsType => {\n    switch (action.type) {\n        case types.SELECT_DIALOG: // выбрать диалог\n            return {\n                ...state,\n                selectedMessages: state.userMessages[ action.id ],\n                selectedDialog: state.userDialogs.find(item => item.id === action.id) || null,\n            }\n        case types.UPDATE_NEW_MESSAGE_TEXT: //изменить текст сообщения\n            return {\n                ...state,\n                newMessageText: action.newText,\n            }\n        case types.ADD_NEW_MESSAGE: //добавить новое сообщение\n            const selectDialogId = state.selectedDialog?.id\n            if (selectDialogId) {\n                const newMessage = {\n                    id: action.id,\n                    message: state.newMessageText,\n                    time: action.date,\n                }\n                const newMessages = [...state.userMessages[ selectDialogId ], newMessage]\n                return {\n                    ...state,\n                    userMessages: {\n                        ...state.userMessages,\n                        [ selectDialogId ]: newMessages,\n                    },\n                    selectedMessages: newMessages,\n                    newMessageText: '',\n                }\n            }\n            return state\n        default:\n            return state\n    }\n}","export type UserType = {\n    id: string\n    firstName: string\n    lastName: string\n    surName: string\n    avatar: string\n    background: string\n    birthDate: string\n    city: string\n    education: string\n    website: string\n}\n\nconst initialState: UserType = {\n    id: 'cscs',\n    firstName: 'John',\n    lastName: 'Dou',\n    surName: '',\n    avatar: 'https://ichef.bbci.co.uk/news/976/cpsprodpb/A7E9/production/_118158924_gettyimages-507245091.jpg',\n    background: 'https://st.depositphotos.com/1522993/4737/v/950/depositphotos_47372005-stock-illustration-orange-blue-background-with-triagles.jpg',\n    birthDate: '2 January 2000',\n    city: 'Minsk',\n    education: 'BSU\\'11',\n    website: 'https://it-kamasutra.com',\n}\n\nexport const userReducer = (state: UserType = initialState, action: any): UserType => {\n    return state\n}","export type FriendType = {\n    id: string\n    name: string\n    avatar: string\n}\n\nexport type FriendsType = {\n    [ key: string ]: FriendType\n}\n\nconst initialState: FriendsType = {\n    '0': {\n        id: '0',\n        name: 'John',\n        avatar: 'https://magazine.skyeng.ru/wp-content/uploads/2019/03/shutterstock_745196731.jpg',\n    },\n    '1': {\n        id: '1',\n        name: 'Sara',\n        avatar: 'https://magazine.skyeng.ru/wp-content/uploads/2019/03/shutterstock_745196731.jpg',\n    },\n    '2': {\n        id: '2',\n        name: 'George',\n        avatar: 'https://magazine.skyeng.ru/wp-content/uploads/2019/03/shutterstock_745196731.jpg',\n    },\n    '3': {\n        id: '3',\n        name: 'Jinny',\n        avatar: 'https://magazine.skyeng.ru/wp-content/uploads/2019/03/shutterstock_745196731.jpg',\n    },\n    '4': {\n        id: '4',\n        name: 'Harry',\n        avatar: 'https://magazine.skyeng.ru/wp-content/uploads/2019/03/shutterstock_745196731.jpg',\n    },\n}\n\nexport const friendsReducer = (state: FriendsType = initialState, action: any): FriendsType => {\n    return state\n}\n\n","export const CHANGE_FOLLOW = 'CHANGE-FOLLOW'\nexport const SET_USERS = 'SET-USERS'","import { v1 } from 'uuid'\nimport * as types from '../types/users'\nimport * as actions from '../actions/users'\n\nconst initialState: UsersType[] = [\n    {\n        userId: v1(),\n        userAvatar: 'https://ichef.bbci.co.uk/news/976/cpsprodpb/A7E9/production/_118158924_gettyimages-507245091.jpg',\n        userFullName: 'Joan One',\n        userStatus: 'Hi there',\n        userLocation: {\n            country: 'Belarus',\n            city: 'Minsk',\n        },\n        followed: true,\n    },\n    {\n        userId: v1(),\n        userAvatar: 'https://ichef.bbci.co.uk/news/976/cpsprodpb/A7E9/production/_118158924_gettyimages-507245091.jpg',\n        userFullName: 'Joan Two',\n        userStatus: 'Hi there',\n        userLocation: {\n            country: 'Russia',\n            city: 'Moscow',\n        },\n        followed: false,\n    },\n    {\n        userId: v1(),\n        userAvatar: 'https://ichef.bbci.co.uk/news/976/cpsprodpb/A7E9/production/_118158924_gettyimages-507245091.jpg',\n        userFullName: 'Joan Three',\n        userStatus: 'Hi there',\n        userLocation: {\n            country: 'Poland',\n            city: 'Warshaw',\n        },\n        followed: true,\n    },\n    {\n        userId: v1(),\n        userAvatar: 'https://ichef.bbci.co.uk/news/976/cpsprodpb/A7E9/production/_118158924_gettyimages-507245091.jpg',\n        userFullName: 'Joan Four',\n        userStatus: 'Hi',\n        userLocation: {\n            country: 'Poland',\n            city: 'Warshaw',\n        },\n        followed: false,\n    },\n]\n\nexport type UsersType = {\n    userId: string\n    userAvatar: string\n    userFullName: string\n    userStatus: string\n    userLocation: { country: string, city: string }\n    followed: boolean\n}\n\nexport type ChangeFollowType = ReturnType<typeof actions.changeFollow>\nexport type SetUsersType = ReturnType<typeof actions.setUsers>\nexport type ActionUsersType = ChangeFollowType | SetUsersType\n\nexport const usersReducer = (state: UsersType[] = initialState, action: ActionUsersType): UsersType[] => {\n    switch (action.type) {\n        case types.CHANGE_FOLLOW:\n            return state\n                .map(user => user.userId === action.payload.userId ? {\n                    ...user,\n                    followed: action.payload.followed,\n                } : user)\n        case types.SET_USERS:\n            return [...state, ...action.payload.users]\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux'\nimport { postsReducer } from './posts'\nimport { dialogsReducer } from './dialogs'\nimport { userReducer } from './user'\nimport { friendsReducer } from './friends'\nimport { usersReducer } from './users'\n\nexport default combineReducers({\n    user: userReducer,\n    friends: friendsReducer,\n    posts: postsReducer,\n    dialogs: dialogsReducer,\n    users: usersReducer,\n})","import { createStore } from 'redux'\nimport rootReducers from './reducers'\nimport { useDispatch } from 'react-redux'\n\nexport const store = createStore(rootReducers)\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatch>()","import React from 'react'\nimport s from './Avatar.module.css'\n\ninterface AvatarProps {\n    avatarUrl?: string\n    size?: 'small' | 'medium' | 'large'\n    shape?: 'square' | 'round'\n}\n\nconst getRandomColour = () => {\n    let rand = 0 - 0.5 + Math.random() * (255 - 0 + 1)\n    return Math.round(rand)\n}\n\nexport const Avatar: React.FC<AvatarProps> = React.memo((\n    {\n        avatarUrl,\n        size = 'medium',\n        shape = 'round',\n    },\n) => {\n    const background = avatarUrl ?\n        { backgroundImage: `url(${ avatarUrl })` } :\n        { backgroundColor: `rgb(${ getRandomColour() }, ${ getRandomColour() }, ${ getRandomColour() })` }\n\n    return (\n        <div\n            className={ [s.avatar, s[ `${ size }` ], s[ `${ shape }` ]].join(' ') }\n            style={ background }\n        ></div>\n    )\n})","import React from 'react'\nimport s from './UserInfo.module.css'\nimport { Avatar } from '../../Avatar/Avatar'\nimport { UserType } from '../../../store/reducers/user'\n\n\ntype UserInfoType = {\n    user: UserType\n}\n\nexport const UserInfo: React.FC<UserInfoType> = React.memo(({ user }) => {\n    const {\n        avatar,\n        firstName,\n        lastName,\n        surName,\n        birthDate,\n        city,\n        education,\n        website,\n    } = user\n    return (\n        <div className={ s.info }>\n            <Avatar avatarUrl={ avatar } shape=\"square\" size=\"large\"/>\n            <div className={ s.description }>\n                <h2 className={ `${ s.userInfo } ${ s.userName }` }>{ `${ firstName } ${ lastName } ${ surName }` }</h2>\n                <p className={ s.userInfo }>{ `Date of Birth: ${ birthDate }` }</p>\n                <p className={ s.userInfo }>{ `City: ${ city }` }</p>\n                <p className={ s.userInfo }>{ `Education: ${ education }` }</p>\n                <p className={ s.userInfo }>Web Site: <a className={ s.websiteLink } href={ website }>{ website }</a>\n                </p>\n            </div>\n        </div>\n    )\n})","import React from 'react'\nimport s from './FormButton.module.css'\n\ninterface FormButtonProps {\n    primary?: boolean\n    value: string\n    size?: 'small' | 'medium' | 'large',\n    position?: 'start' | 'end' | 'center' | 'stretch'\n}\n\nexport const FormButton: React.FC<FormButtonProps> = React.memo((\n    {\n        primary = true,\n        value,\n        size = 'medium',\n        position = 'end',\n    },\n) => {\n    const mode = primary ? 'primary' : 'secondary'\n    return (\n        <input\n            className={ [s.formButton, s[ `${ mode }` ], s[ `${ size }` ], s[ `${ position }` ]].join(' ') }\n            type=\"submit\"\n            value={ value }\n        />\n    )\n})","import React, { FormEvent, ChangeEvent, KeyboardEvent } from 'react'\nimport { FormButton } from '../../../FormButton/FormButton'\nimport s from './NewPost.module.css'\nimport { MapDispatchPropType } from '../../../../Pages/ProfilePage/ProfilePage'\n\ntype NewPostType = {\n    newPostText: string\n} & MapDispatchPropType\n\nexport const NewPost: React.FC<NewPostType> = React.memo((\n    {\n        newPostText,\n        changeNewPostTextCallback, addNewPostCallback,\n    }) => {\n\n    const onSubmit = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n        addNewPostCallback()\n    }\n    const onEnterPress = (event: KeyboardEvent<HTMLTextAreaElement>) => {\n        if (event.key === 'Enter') {\n            event.preventDefault()\n            addNewPostCallback()\n        }\n    }\n\n    const onChangePostText = (event: ChangeEvent<HTMLTextAreaElement>) =>\n        changeNewPostTextCallback(event.currentTarget.value)\n\n    return (\n        <form\n            className={ s.newPostContainer }\n            onSubmit={ onSubmit }\n        >\n            <textarea\n                className={ s.text }\n                rows={ 5 }\n                value={ newPostText }\n                placeholder=\"Write text...\"\n                onChange={ onChangePostText }\n                onKeyPress={ onEnterPress }\n            />\n            <FormButton\n                value=\"Add post\"\n                position=\"end\"\n                primary={ true }\n                size=\"medium\"\n            />\n        </form>\n    )\n})","import React from 'react'\nimport { Avatar } from '../../../Avatar/Avatar'\nimport s from './PostItem.module.css'\n\n\ntype PostItemType = {\n    avatarUrl: string\n    text: string\n    likes: number\n    time: Date\n}\n\nexport const PostItem: React.FC<PostItemType> = React.memo((\n    {\n        avatarUrl,\n        text,\n        time,\n        likes,\n    }) => {\n\n    const date = time.getDate()\n    const month = time.getMonth() + 1 > 9 ? time.getMonth() + 1 : `0${ time.getMonth() + 1 }`\n    const year = time.getFullYear()\n    const hours = time.getHours()\n    const minutes = time.getMinutes() > 9 ? time.getMinutes() : `0${ time.getMinutes() }`\n    const humanDate = `${ date }.${ month }.${ year } ${ hours }:${ minutes }`\n\n    return (\n        <section className={ s.postItem }>\n            <Avatar avatarUrl={ avatarUrl }/>\n            <div className={ s.container }>\n                <article className={ s.text }>{ text }</article>\n                <time\n                    className={ s.date }\n                    dateTime={ `${ time }` }\n                >\n                    { humanDate }\n                </time>\n                <span className={ s.reaction }>likes { likes }</span>\n            </div>\n        </section>\n    )\n})","import React, { useMemo } from 'react'\nimport { NewPost } from './NewPost/NewPost'\nimport { PostItem } from './PostItem/PostItem'\nimport s from './Posts.module.css'\nimport { PostsType } from '../../../store/reducers/posts'\nimport { MapDispatchPropType } from '../../../Pages/ProfilePage/ProfilePage'\n\ntype PostsPropType = {\n    avatar: string\n    userPosts: PostsType\n} & MapDispatchPropType\n\nexport const Posts: React.FC<PostsPropType> = React.memo((\n    {\n        avatar, userPosts,\n        changeNewPostTextCallback, addNewPostCallback,\n    }) => {\n\n    const { posts, newPostText } = userPosts\n    const mappedPosts = useMemo(() => posts.map((post) => {\n        return <PostItem\n            avatarUrl={ avatar }\n            text={ post.text }\n            time={ post.time }\n            likes={ post.likes }\n            key={ post.id }\n        />\n    }), [posts, avatar])\n\n    return (\n        <div className={ s.postsContainer }>\n            <h2 className={ s.title }>My Posts</h2>\n            <NewPost\n                newPostText={ newPostText }\n                addNewPostCallback={ addNewPostCallback }\n                changeNewPostTextCallback={ changeNewPostTextCallback }\n            />\n            { mappedPosts }\n        </div>\n    )\n})","import React from 'react'\nimport { UserInfo } from './UserInfo/UserInfo'\nimport { Posts } from './Posts/Posts'\nimport s from './Profile.module.css'\nimport { MapDispatchPropType, MapStatePropType } from '../../Pages/ProfilePage/ProfilePage'\n\ntype ProfilePropType = MapDispatchPropType & MapStatePropType\n\nexport const Profile: React.FC<ProfilePropType> = React.memo((\n    {\n        user, posts,\n        changeNewPostTextCallback, addNewPostCallback,\n    }) => {\n    return (\n        <main className={ s.profile }>\n            <div\n                className={ s.image }\n                style={ { backgroundImage: `url(${ user.background })` } }\n            ></div>\n            <UserInfo user={ user }/>\n            <Posts\n                avatar={ user.avatar }\n                userPosts={ posts }\n                addNewPostCallback={ addNewPostCallback }\n                changeNewPostTextCallback={ changeNewPostTextCallback }\n            />\n        </main>\n    )\n})","import React from 'react'\nimport { Profile } from '../../components/Profile/Profile'\nimport { PostsType } from '../../store/reducers/posts'\nimport { UserType } from '../../store/reducers/user'\nimport { RootState } from '../../store'\nimport * as actions from '../../store/actions/posts'\nimport { connect } from 'react-redux'\n\nexport type MapStatePropType = {\n    user: UserType\n    posts: PostsType\n}\n\nexport type MapDispatchPropType = {\n    changeNewPostTextCallback: (newText: string) => void\n    addNewPostCallback: () => void\n}\n\nconst mapStateToProps = (state: RootState): MapStatePropType => {\n    return {\n        user: state.user,\n        posts: state.posts,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): MapDispatchPropType => {\n    return {\n        changeNewPostTextCallback: (newText: string) => dispatch(actions.updateNewPostText(newText)),\n        addNewPostCallback: () => dispatch(actions.addNewPost()),\n    }\n}\n\nconst ProfileContainer = connect(mapStateToProps, mapDispatchToProps)(Profile)\n\nexport const ProfilePage = React.memo(() => <ProfileContainer/>)\n","import * as types from '../types/posts'\nimport { v1 } from 'uuid'\n\nexport const updateNewPostText = (newText: string) => ({\n    type: types.UPDATE_NEW_POST_TEXT,\n    newText,\n} as const)\n\nexport const addNewPost = () => ({\n    type: types.ADD_NEW_POST,\n    postId: v1(),\n    postTime: new Date(),\n} as const)","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport s from './Dialog.module.css'\nimport { DialogType } from '../../../store/reducers/dialogs'\n\ntype PropTypes = {\n    dialog: DialogType\n    selectDialogCallback: (id: string) => void\n}\n\nexport const Dialog: React.FC<PropTypes> = React.memo((\n    {\n        dialog, selectDialogCallback,\n    }) => {\n    const onSelectDialog = () => selectDialogCallback(dialog.id)\n\n    return (\n        <li\n            className={ s.item }\n            onClick={ onSelectDialog }\n        >\n            <NavLink\n                className={ s.link }\n                to={ `/dialogs/${ dialog.id }` }\n                activeClassName={ s.active }\n            >\n                { dialog.name }\n            </NavLink>\n        </li>\n    )\n})","import React from 'react'\nimport { Avatar } from '../../../Avatar/Avatar'\nimport s from './Message.module.css'\nimport { UserMessageType } from '../../../../store/reducers/dialogs'\n\n\ntype PropTypes = {\n    userMode: boolean\n    name: string\n    message: UserMessageType\n    avatar: string | undefined\n}\n\nexport const Message: React.FC<PropTypes> = React.memo((\n    {\n        userMode,\n        name,\n        message,\n        avatar,\n    }) => {\n    const itemContainerMode = userMode ? `${ s.userItemContainer }` : `${ s.friendItemContainer }`\n    const humanTime = `\n        ${ message.time.getHours() }:${ message.time.getMinutes() < 10\n        ? `0${ message.time.getMinutes() }`\n        : message.time.getMinutes() }\n    `\n\n    return (\n        <div className={ [s.itemContainer, itemContainerMode].join(' ') }>\n            <Avatar avatarUrl={ avatar } size=\"small\" shape=\"round\"/>\n            <div className={ s.messageContainer }>\n                <div>\n                    <p className={ s.userName }>{ name }</p>\n                    <p className={ s.message }>{ message.message }</p>\n                </div>\n                <span className={ s.time }>{ humanTime }</span>\n            </div>\n        </div>\n    )\n})\n","import React, { ChangeEvent, FormEvent } from 'react'\nimport s from './NewMessage.module.css'\nimport { FormButton } from '../../../FormButton/FormButton'\n\ntype NewMessageType = {\n    newMessageText: string\n    changeNewMessageTextCallback: (newText: string) => void\n    triggerAddNewMessage: () => void\n}\n\nexport const NewMessage: React.FC<NewMessageType> = React.memo((\n    {\n        newMessageText,\n        changeNewMessageTextCallback,\n        triggerAddNewMessage,\n    }) => {\n\n    const onSubmit = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n        triggerAddNewMessage()\n    }\n\n    const onChangeMessageText = (event: ChangeEvent<HTMLTextAreaElement>) => {\n        changeNewMessageTextCallback(event.currentTarget.value)\n    }\n\n    return (\n        <div className={ s.newMessageContainer }>\n            <form\n                className={ s.form }\n                onSubmit={ onSubmit }\n            >\n                <textarea\n                    className={ s.newMessageText }\n                    rows={ 1 }\n                    value={ newMessageText }\n                    placeholder=\"Tap-tap...\"\n                    onChange={ onChangeMessageText }\n                />\n                <FormButton value=\"Send\" position=\"stretch\" primary={ true } size=\"medium\"/>\n            </form>\n        </div>\n    )\n})","import React, { useMemo } from 'react'\nimport { Message } from './Message/Message'\nimport { NewMessage } from './NewMessage/NewMessage'\nimport s from './Messages.module.css'\nimport { DialogType, UserMessageType } from '../../../store/reducers/dialogs'\nimport { UserType } from '../../../store/reducers/user'\n\ntype PropTypes = {\n    messages: Array<UserMessageType>\n    friend: DialogType\n    newMessageText: string\n    user: UserType\n    changeNewMessageTextCallback: (newText: string) => void\n    addNewMessageToDialogCallback: (userId: string) => void\n}\n\nexport const Messages: React.FC<PropTypes> = React.memo((\n    {\n        messages, friend, newMessageText,\n        user,\n        changeNewMessageTextCallback, addNewMessageToDialogCallback,\n    }) => {\n    const mappedMessages = useMemo(() => messages.map((message: UserMessageType, id) => {\n        const name = message.id === user.id ? user.firstName : friend.name\n        const avatar = message.id === user.id ? user.avatar : friend.avatar\n        const userMode = message.id === user.id\n        return < Message\n            key={ id }\n            userMode={ userMode }\n            name={ name }\n            message={ message }\n            avatar={ avatar }\n        />\n    }), [messages, user, friend])\n\n    const triggerAddNewMessage = () => addNewMessageToDialogCallback(user.id)\n\n    return (\n        <div className={ s.messagesContainer }>\n            { mappedMessages }\n            <NewMessage\n                newMessageText={ newMessageText }\n                changeNewMessageTextCallback={ changeNewMessageTextCallback }\n                triggerAddNewMessage={ triggerAddNewMessage }\n            />\n        </div>\n    )\n})","import React, { useMemo } from 'react'\nimport { Dialog } from './Dialog/Dialog'\nimport { Messages } from './Messages/Messages'\nimport s from './Dialogs.module.css'\nimport { DialogType } from '../../store/reducers/dialogs'\nimport { MapDispatchPropType, MapStatePropType } from '../../Pages/DialogsPage/DialogsPage'\n\ntype PropTypes = MapStatePropType & MapDispatchPropType\n\nexport const Dialogs: React.FC<PropTypes> = React.memo((\n    {\n        dialogs, user,\n        selectDialogCallback, changeNewMessageTextCallback,\n        addNewMessageToDialogCallback,\n    }) => {\n    const { userDialogs, selectedMessages, selectedDialog, newMessageText } = dialogs\n\n    const mappedDialogs = useMemo(() => userDialogs.map((dialog: DialogType) => (\n        <Dialog\n            dialog={ dialog }\n            selectDialogCallback={ selectDialogCallback }\n            key={ dialog.id }\n        />\n    )), [userDialogs, selectDialogCallback])\n\n    return (\n        <div className={ s.container }>\n            <div className={ s.dialogs }>\n                <ul className={ s.list }>\n                    { mappedDialogs }\n                </ul>\n            </div>\n            <div className={ s.messages }>\n                { selectedDialog && selectedMessages\n                    ? <Messages\n                        messages={ selectedMessages }\n                        friend={ selectedDialog }\n                        newMessageText={ newMessageText }\n                        user={ user }\n                        changeNewMessageTextCallback={ changeNewMessageTextCallback }\n                        addNewMessageToDialogCallback={ addNewMessageToDialogCallback }\n                    />\n                    : <div className={ s.info }>Select dialog</div> }\n            </div>\n        </div>\n    )\n})","import React from 'react'\nimport { Dialogs } from '../../components/Dialogs/Dialogs'\nimport { addNewMessage, selectDialog, updateNewMessageText } from '../../store/actions/dialogs'\nimport { UserType } from '../../store/reducers/user'\nimport { RootState } from '../../store'\nimport { DialogsType } from '../../store/reducers/dialogs'\nimport { connect } from 'react-redux'\n\nexport type MapStatePropType = {\n    user: UserType\n    dialogs: DialogsType\n}\n\nexport type MapDispatchPropType = {\n    selectDialogCallback: (dialogId: string) => void\n    changeNewMessageTextCallback: (newText: string) => void\n    addNewMessageToDialogCallback: (userId: string) => void\n}\n\nconst mapStateToProps = (state: RootState): MapStatePropType => {\n    return {\n        user: state.user,\n        dialogs: state.dialogs,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): MapDispatchPropType => {\n    return {\n        selectDialogCallback: (dialogId: string) => dispatch(selectDialog(dialogId)),\n        changeNewMessageTextCallback: (newText: string) => dispatch(updateNewMessageText(newText)),\n        addNewMessageToDialogCallback: (userId) => dispatch(addNewMessage(userId)),\n    }\n}\n\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)\n\nexport const DialogsPage = React.memo(() => <DialogsContainer/>)","import * as types from '../types/dialogs'\n\nexport const selectDialog = (id: string) => ({\n    type: types.SELECT_DIALOG,\n    id,\n} as const)\n\nexport const updateNewMessageText = (newText: string) => ({\n    type: types.UPDATE_NEW_MESSAGE_TEXT,\n    newText,\n} as const)\n\nexport const addNewMessage = (id: string) => ({\n    type: types.ADD_NEW_MESSAGE,\n    id,\n    date: new Date(),\n} as const)","import React from 'react'\n\nexport const NewsPage = React.memo(() => {\n    console.log('newsPage')\n    return (\n        <>\n            NewsPage\n        </>\n    )\n})","import React from 'react'\n\nexport const MusicPage = React.memo(() => {\n    console.log('musicPage')\n    return (\n        <>\n            MusicPage\n        </>\n    )\n})","import React from 'react'\n\nexport const SettingsPage = React.memo(() => {\n    console.log('settingsPage')\n    return (\n        <>\n            SettingsPage\n        </>\n    )\n})","import React, { FormEvent } from 'react'\nimport s from './UsersItem.module.css'\nimport { Avatar } from '../../Avatar/Avatar'\nimport { FormButton } from '../../FormButton/FormButton'\nimport { UsersType } from '../../../store/reducers/users'\n\ntype UsersItemType = {\n    user: UsersType\n    changeFollowCallback: (userId: string, followed: boolean) => void\n}\n\nexport const UsersItem: React.FC<UsersItemType> = React.memo((\n    {\n        user, changeFollowCallback,\n    },\n) => {\n    const changeFollow = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n        changeFollowCallback(user.userId, user.followed)\n    }\n    return <div className={ s.userItemContainer }>\n        <div className={ s.followContainer }>\n            <Avatar\n                size={ 'medium' }\n                shape={ 'round' }\n                avatarUrl={ user.userAvatar }\n            />\n            <form\n                onSubmit={ changeFollow }\n            >\n                <FormButton\n                    value={ user.followed ? 'Unfollow' : 'Follow' }\n                    size={ 'medium' }\n                    position={ 'center' }\n                    primary={ !user.followed }\n                />\n            </form>\n        </div>\n        <div className={ s.userInfoContainer }>\n            <h3 className={ s.userInfoFullName }>{ user.userFullName }</h3>\n            <p className={ s.userInfoStatus }>{ user.userStatus }</p>\n        </div>\n        <div className={ s.userLocationContainer }>\n            <p className={ s.userLocationCountry }>{ user.userLocation.country }</p>\n            <p className={ s.userLocationCity }>{ user.userLocation.city }</p>\n        </div>\n    </div>\n})","import React, { FormEvent } from 'react'\nimport { MapStateToPropsType, MapDispatchToPropsType } from '../../Pages/UsersPage'\nimport s from './Users.module.css'\nimport { UsersItem } from './UsersItem/UsersItem'\nimport { FormButton } from '../FormButton/FormButton'\n\ntype UsersPropType = MapStateToPropsType & MapDispatchToPropsType\n\nexport const Users: React.FC<UsersPropType> = React.memo((\n    {\n        users, changeFollowCallback, setUsersCallback,\n    },\n) => {\n    const setUsers = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n    }\n    const mappedUsersItem = users.map(user => (\n        <UsersItem\n            key={ user.userId }\n            user={ user }\n            changeFollowCallback={ changeFollowCallback }\n        />\n    ))\n    return <main className={ s.users }>\n        <div className={ s.UsersPageContainer }>\n            <div className={ s.UsersContainer }>\n                { mappedUsersItem }\n            </div>\n            <form onSubmit={ setUsers }>\n                <FormButton\n                    value={ 'Show more' }\n                    primary size={ 'large' }\n                    position={ 'center' }\n                />\n            </form>\n        </div>\n    </main>\n})","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Users } from '../components/Users/Users'\nimport { RootState } from '../store'\nimport { UsersType } from '../store/reducers/users'\nimport * as actions from '../store/actions/users'\n\nexport type MapStateToPropsType = {\n    users: UsersType[]\n}\n\nexport type MapDispatchToPropsType = {\n    changeFollowCallback: (userId: string, followed: boolean) => void\n    setUsersCallback: (users: UsersType[]) => void\n}\n\nconst mapStateToProps = (state: RootState): MapStateToPropsType => {\n    return {\n        users: state.users,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): MapDispatchToPropsType => ({\n    changeFollowCallback: (userId: string, followed: boolean) => dispatch(actions.changeFollow(userId, followed)),\n    setUsersCallback: (users: UsersType[]) => dispatch(actions.setUsers(users)),\n})\n\nconst UsersContainer = connect(mapStateToProps, mapDispatchToProps)(Users)\nexport const UsersPage = React.memo(() => <UsersContainer/>)","import * as types from '../types/users'\nimport { UsersType } from '../reducers/users'\n\nexport const changeFollow = (userId: string, followed: boolean) => ({\n    type: types.CHANGE_FOLLOW,\n    payload: {\n        userId,\n        followed: !followed,\n    },\n} as const)\n\nexport const setUsers = (users: UsersType[]) => ({\n    type: types.SET_USERS,\n    payload: {\n        users,\n    },\n} as const)","import React from \"react\"\nimport s from './Header.module.css'\n\nexport const Header = () => {\n    return (\n        <header className={s.header}>\n            <img\n                className={s.image}\n                src=\"https://img.icons8.com/ios-filled/50/000000/logo.png\"\n                alt=\"logo\"\n            />\n            <h1>Такая-то сеть</h1>\n        </header>\n    )\n}","import React from 'react'\nimport { Avatar } from '../../Avatar/Avatar'\nimport s from './FriendItem.module.css'\nimport { FriendType } from '../../../store/reducers/friends'\n\ntype PropTypes = {\n    friend: FriendType\n}\n\nexport const FriendItem: React.FC<PropTypes> = React.memo(({ friend }) => {\n    const { name, avatar } = friend\n    return (\n        <div className={ s.friendContainer }>\n            <span className={ s.friendName }>{ name }</span>\n            <Avatar avatarUrl={ avatar } shape=\"round\" size=\"medium\"/>\n        </div>\n    )\n})","import React, { useMemo } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { FriendItem } from './FriendItem/FriendItem'\nimport s from './NavBar.module.css'\nimport { FriendsType } from '../../store/reducers/friends'\n\n\ntype NavItemType = {\n    id: number\n    name: string\n}\ntype NavType = Array<NavItemType>\n\ntype PropType = {\n    friends: FriendsType\n}\n\nconst nav: NavType = [\n    { id: 0, name: 'Profile' },\n    { id: 1, name: 'Dialogs' },\n    { id: 2, name: 'Users' },\n    { id: 3, name: 'News' },\n    { id: 4, name: 'Music' },\n    { id: 5, name: 'Settings' },\n]\n\nexport const NavBar: React.FC<PropType> = React.memo(({ friends }) => {\n    const mappedNavigation = useMemo(() => nav.map((item) => (\n        <div className={ s.item } key={ item.id }>\n            <NavLink\n                to={ `/${ item.name.toLowerCase() }` }\n                className={ s.link }\n                activeClassName={ s.active }\n            >{ item.name }</NavLink>\n        </div>\n    )), [])\n\n    const mappedFriends = useMemo(() => Object.values(friends).map((friend) => (\n        <FriendItem\n            friend={ friend }\n            key={ friend.id }\n        />\n    )), [friends])\n\n\n    return (\n        <nav className={ s.nav }>\n            { mappedNavigation }\n            <div className={ s.friendsContainer }>\n                { mappedFriends }\n            </div>\n        </nav>\n    )\n})","import React from 'react'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { useRoutes } from './routes'\nimport { Header } from './components/Header/Header'\nimport { NavBar } from './components/NavBar/NavBar'\nimport './App.css'\nimport { RootState } from './store'\n\nexport type AppTypes = {\n    state: RootState\n}\n\nexport const App: React.FC<AppTypes> = (\n    {\n        state,\n    }) => {\n    const { friends } = state\n    const routes = useRoutes()\n    return (\n        <Router>\n            <div className=\"app-wrapper\">\n                <Header/>\n                <NavBar friends={ friends }/>\n                { routes }\n            </div>\n        </Router>\n    )\n}\n","import React from 'react'\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport { ProfilePage } from './Pages/ProfilePage/ProfilePage'\nimport { DialogsPage } from './Pages/DialogsPage/DialogsPage'\nimport { NewsPage } from './Pages/NewsPage/NewsPage'\nimport { MusicPage } from './Pages/MusicPage/MusicPage'\nimport { SettingsPage } from './Pages/SettingsPage/SettingsPage'\nimport { UsersPage } from './Pages/UsersPage'\n\nexport const useRoutes = () => {\n    return (\n        <Switch>\n            <Route path=\"/profile\">\n                <ProfilePage/>\n            </Route>\n            <Route path=\"/dialogs\">\n                <DialogsPage/>\n            </Route>\n            <Route path=\"/users\">\n                <UsersPage/>\n            </Route>\n            <Route path=\"/news\">\n                <NewsPage/>\n            </Route>\n            <Route path=\"/music\">\n                <MusicPage/>\n            </Route>\n            <Route path=\"/settings\">\n                <SettingsPage/>\n            </Route>\n            <Redirect to=\"/profile\"/>\n        </Switch>\n    )\n}","import './index.css'\nimport { store } from './store'\nimport ReactDOM from 'react-dom'\nimport React from 'react'\nimport { App } from './App'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={ store }>\n            <App state={ store.getState() }/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n)"],"sourceRoot":""}