{"version":3,"sources":["components/Profile/UserInfo/UserInfo.module.css","components/Dialogs/Messages/Message/Message.module.css","components/Profile/Posts/PostItem/PostItem.module.css","components/NavBar/NavBar.module.css","components/FormButton/FormButton.module.css","components/Dialogs/Dialogs.module.css","components/Avatar/Avatar.module.css","components/Dialogs/Dialog/Dialog.module.css","components/Dialogs/Messages/NewMessage/NewMessage.module.css","components/Profile/Posts/NewPost/NewPost.module.css","components/Profile/Posts/Posts.module.css","components/Profile/Profile.module.css","components/Header/Header.module.css","components/NavBar/FriendItem/FriendItem.module.css","components/Dialogs/Messages/Messages.module.css","store/types/posts.tsx","store/types/dialogs.tsx","redux/state.ts","components/Avatar/Avatar.tsx","components/Profile/UserInfo/UserInfo.tsx","components/FormButton/FormButton.tsx","components/Profile/Posts/NewPost/NewPost.tsx","store/actions/posts.tsx","components/Profile/Posts/PostItem/PostItem.tsx","components/Profile/Posts/Posts.tsx","components/Profile/Profile.tsx","Pages/ProfilePage/ProfilePage.tsx","components/Dialogs/Dialog/Dialog.tsx","store/actions/dialogs.tsx","components/Dialogs/Messages/Message/Message.tsx","components/Dialogs/Messages/NewMessage/NewMessage.tsx","components/Dialogs/Messages/Messages.tsx","components/Dialogs/Dialogs.tsx","Pages/DialogsPage/DialogsPage.tsx","Pages/NewsPage/NewsPage.tsx","Pages/MusicPage/MusicPage.tsx","Pages/SettingsPage/SettingsPage.tsx","components/Header/Header.tsx","components/NavBar/FriendItem/FriendItem.tsx","components/NavBar/NavBar.tsx","App.tsx","routes.tsx","index.tsx"],"names":["module","exports","UPDATE_NEW_POST_TEXT","ADD_NEW_POST","SELECT_DIALOG","UPDATE_NEW_MESSAGE_TEXT","ADD_NEW_MESSAGE","store","_state","profile","user","id","firstName","lastName","surName","avatar","background","birthDate","city","education","website","posts","userId","newPostText","text","time","Date","likes","dialogs","selectedDialog","selectedMessages","newMessageText","userDialogs","name","userMessages","message","navbar","friends","getState","this","_callSubscriber","console","log","subscribe","observer","dispatch","action","type","postsTypes","postsClone","clone","newPost","v1","newText","dialogsTypes","find","item","selectDialogId","newMessage","messagesClone","getRandomColour","rand","Math","random","round","Avatar","React","memo","avatarUrl","size","shape","backgroundImage","backgroundColor","className","s","join","style","UserInfo","info","description","userInfo","userName","websiteLink","href","FormButton","primary","value","position","mode","formButton","NewPost","createNewPost","types","newPostContainer","onSubmit","event","preventDefault","rows","placeholder","onChange","currentTarget","onKeyPress","key","PostItem","date","getDate","month","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","humanDate","postItem","container","dateTime","reaction","Posts","userPosts","mappedPosts","useMemo","map","post","postsContainer","title","Profile","image","ProfilePage","Dialog","dialog","itemClassName","onClick","link","to","activeClassName","active","Message","userMode","itemContainerMode","userItemContainer","friendItemContainer","humanTime","itemContainer","messageContainer","NewMessage","newMessageContainer","form","Messages","messages","friend","mappedMessages","messagesContainer","Dialogs","mappedDialogs","list","DialogsPage","NewsPage","MusicPage","SettingsPage","Header","header","src","alt","FriendItem","friendContainer","friendName","nav","NavBar","mappedNavigation","toLowerCase","mappedFriends","Object","values","friendsContainer","App","state","routes","path","useRoutes","bind","rerenderTree","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e335fdf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"UserInfo_info__2EQyR\",\"description\":\"UserInfo_description__14juR\",\"userName\":\"UserInfo_userName__11PxP\",\"userInfo\":\"UserInfo_userInfo__19Gg7\",\"websiteLink\":\"UserInfo_websiteLink__3D7ka\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemContainer\":\"Message_itemContainer__3Ogp1\",\"userItemContainer\":\"Message_userItemContainer__L8nc4\",\"messageContainer\":\"Message_messageContainer__50BSK\",\"friendItemContainer\":\"Message_friendItemContainer__30-yD\",\"userName\":\"Message_userName__1inz4\",\"message\":\"Message_message__2XMh9\",\"time\":\"Message_time__R0PKs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postItem\":\"PostItem_postItem__cJGuU\",\"container\":\"PostItem_container__2JWlg\",\"title\":\"PostItem_title__3ciLf\",\"text\":\"PostItem_text__1-F9Y\",\"date\":\"PostItem_date__2_aLQ\",\"reaction\":\"PostItem_reaction__3faHJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__1FWUI\",\"item\":\"NavBar_item__2RAQQ\",\"link\":\"NavBar_link__2Iixg\",\"active\":\"NavBar_active__1HRI5\",\"friendsContainer\":\"NavBar_friendsContainer__3dQug\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formButton\":\"FormButton_formButton__3Y9lb\",\"primary\":\"FormButton_primary__1Vw-K\",\"secondary\":\"FormButton_secondary__2WLr0\",\"start\":\"FormButton_start__oYJER\",\"center\":\"FormButton_center__2BNk0\",\"end\":\"FormButton_end__le1rA\",\"stretch\":\"FormButton_stretch__AiuYc\",\"small\":\"FormButton_small__3X9yO\",\"medium\":\"FormButton_medium__3A7Ff\",\"large\":\"FormButton_large__3YqLg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Dialogs_container__2p0uA\",\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"list\":\"Dialogs_list__3m0__\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Avatar_avatar__2A8Ju\",\"round\":\"Avatar_round__2hSiZ\",\"square\":\"Avatar_square__3sTiD\",\"small\":\"Avatar_small__3X69T\",\"medium\":\"Avatar_medium__1gMp0\",\"large\":\"Avatar_large__ou5Nn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Dialog_item__2jaF4\",\"link\":\"Dialog_link__2CIRa\",\"active\":\"Dialog_active__2fc4o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newMessageContainer\":\"NewMessage_newMessageContainer__O9LOI\",\"form\":\"NewMessage_form__1LYM4\",\"newMessageText\":\"NewMessage_newMessageText__1H5T9\",\"button\":\"NewMessage_button__YNSf_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPostContainer\":\"NewPost_newPostContainer__1vaC7\",\"title\":\"NewPost_title__2nRLX\",\"text\":\"NewPost_text__1eobX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsContainer\":\"Posts_postsContainer__3fBmN\",\"title\":\"Posts_title__23BoN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__3dzvr\",\"image\":\"Profile_image__2MW_9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\",\"image\":\"Header_image__1zcEI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendContainer\":\"FriendItem_friendContainer__312yD\",\"friendName\":\"FriendItem_friendName__1VsdD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messagesContainer\":\"Messages_messagesContainer__3RCBn\"};","export const UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT'\nexport const ADD_NEW_POST = 'ADD-NEW-POST'","export const SELECT_DIALOG = 'SELECT-DIALOG'\nexport const UPDATE_NEW_MESSAGE_TEXT = 'UPDATE-NEW-MESSAGE-TEXT'\nexport const ADD_NEW_MESSAGE = 'ADD-NEW-MESSAGE'","import { v1 } from 'uuid'\nimport clone from 'clone-deep'\nimport * as postsTypes from '../store/types/posts'\nimport * as dialogsTypes from '../store/types/dialogs'\nimport * as postsActions from '../store/actions/posts'\nimport * as dialogsActions from '../store/actions/dialogs'\n// TS\nexport type UserTypes = {\n    id: string\n    firstName: string\n    lastName: string\n    surName: string\n    avatar: string\n    background: string\n    birthDate: string\n    city: string\n    education: string\n    website: string\n}\n\nexport type PostTypes = {\n    id: string\n    text: string\n    time: Date\n    likes: number\n}\n\nexport type PostsTypes = {\n    userId: string\n    newPostText: string\n    posts: Array<PostTypes>\n}\n\nexport type ProfileTypes = {\n    user: UserTypes\n    posts: PostsTypes\n}\n\nexport type DialogTypes = {\n    id: string\n    name: string\n    avatar: string\n}\n\nexport type UserMessageTypes = {\n    id: string\n    message: string\n    time: Date\n}\n\nexport type UsersMessagesTypes = {\n    [ key: string ]: Array<UserMessageTypes>\n}\n\nexport type DialogsTypes = {\n    selectedDialog: DialogTypes | null\n    selectedMessages: Array<UserMessageTypes> | null\n    newMessageText: string\n    userDialogs: Array<DialogTypes>\n    userMessages: UsersMessagesTypes\n}\n\nexport type FriendTypes = {\n    id: string\n    name: string\n    avatar: string\n}\n\nexport type FriendsTypes = {\n    [ key: string ]: FriendTypes\n}\n\nexport type NavbarTypes = {\n    friends: FriendsTypes\n}\n\nexport type StateTypes = {\n    profile: ProfileTypes\n    dialogs: DialogsTypes\n    navbar: NavbarTypes\n}\n\nexport type UpdateNewPostTextType = ReturnType<typeof postsActions.updateNewPostText>\nexport type AddNewPostType = ReturnType<typeof postsActions.addNewPost>\nexport type SelectDialogType = ReturnType<typeof dialogsActions.selectDialog>\nexport type UpdateNewMessageTextType = ReturnType<typeof dialogsActions.updateNewMessageText>\nexport type AddNewMessageType = ReturnType<typeof dialogsActions.addNewMessage>\nexport type ActionType = AddNewPostType\n    | UpdateNewPostTextType\n    | SelectDialogType\n    | UpdateNewMessageTextType\n    | AddNewMessageType\n\nexport type StoreType = {\n    _state: StateTypes\n    _callSubscriber: () => void\n    getState: () => StateTypes\n    subscribe: (observer: () => void) => void\n    dispatch: (action: ActionType) => void\n}\n\n// Post Function\nexport const store: StoreType = {\n    _state: {\n        profile: {\n            user: {\n                id: 'cscs',\n                firstName: 'John',\n                lastName: 'Dou',\n                surName: '',\n                avatar: 'https://ichef.bbci.co.uk/news/976/cpsprodpb/A7E9/production/_118158924_gettyimages-507245091.jpg',\n                background: 'https://st.depositphotos.com/1522993/4737/v/950/depositphotos_47372005-stock-illustration-orange-blue-background-with-triagles.jpg',\n                birthDate: '2 January 2000',\n                city: 'Minsk',\n                education: 'BSU\\'11',\n                website: 'https://it-kamasutra.com',\n            },\n            posts: {\n                userId: '0',\n                newPostText: '',\n                posts: [\n                    {\n                        id: 'ccc',\n                        text: 'В новой записи вы решили уточнить точное время дня (а точнее ночи), когда именно была сделана запись. Строку со временем можно оставить просто текстом, но есть вариант получше. В HTML есть специальный тег для разметки даты и времени',\n                        time: new Date(`2021-07-18T15:07:55.582Z`),\n                        likes: 3,\n\n                    },\n                    {\n                        id: 'vvv',\n                        text: 'Инструменты для статической типизации, такие как Flow или TypeScript, позволяют отлавливать большую часть ошибок ещё до исполнения кода. Кроме того, они существенно улучшают процессы разработки, добавляя автодополнение и другие возможности. Для приложений с большой кодовой базой мы рекомендуем использовать Flow или TypeScript вместо PropTypes.',\n                        time: new Date(`2021-07-18T18:07:13.943Z`),\n                        likes: 20,\n                    },\n                    {\n                        id: 'lll',\n                        text: 'Flow — это библиотека для статической типизации JavaScript, разработанная в Facebook и часто применяемая в связке с React. Flow расширяет возможности JavaScript, добавляя аннотации типов для переменных, функций и React-компонентов.',\n                        time: new Date(`2021-07-18T18:38:10.515Z`),\n                        likes: 11,\n                    },\n                ],\n            },\n        },\n        dialogs: {\n            selectedDialog: null,\n            selectedMessages: null,\n            newMessageText: '',\n            userDialogs: [\n                {\n                    id: '0',\n                    name: 'John',\n                    avatar: 'https://sun9-74.userapi.com/Ph-WiuOtF985il9AvN9JqiCWedmHtSGSSTXrSA/ltEB2Z2-YO4.jpg',\n                },\n                {\n                    id: '1',\n                    name: 'Sara',\n                    avatar: 'https://sun9-74.userapi.com/Ph-WiuOtF985il9AvN9JqiCWedmHtSGSSTXrSA/ltEB2Z2-YO4.jpg',\n                },\n                {\n                    id: '2',\n                    name: 'George',\n                    avatar: 'https://sun9-74.userapi.com/Ph-WiuOtF985il9AvN9JqiCWedmHtSGSSTXrSA/ltEB2Z2-YO4.jpg',\n                },\n                {\n                    id: '3',\n                    name: 'Jinny',\n                    avatar: 'https://sun9-74.userapi.com/Ph-WiuOtF985il9AvN9JqiCWedmHtSGSSTXrSA/ltEB2Z2-YO4.jpg',\n                },\n                {\n                    id: '4',\n                    name: 'Harry',\n                    avatar: 'https://sun9-74.userapi.com/Ph-WiuOtF985il9AvN9JqiCWedmHtSGSSTXrSA/ltEB2Z2-YO4.jpg',\n                },\n            ],\n            userMessages: {\n                '0': [\n                    {\n                        id: '0',\n                        message: 'Hi',\n                        time: new Date(`2021-07-18T18:07:13.943Z`),\n                    },\n                    {\n                        id: 'cscs',\n                        message: 'How are you?',\n                        time: new Date(`2021-07-18T18:07:13.943Z`),\n                    },\n                    {\n                        id: '0',\n                        message: 'What are you doing now?',\n                        time: new Date(`2021-07-18T18:07:13.943Z`),\n                    },\n                ],\n                '1': [\n                    {\n                        id: '1',\n                        message: 'Hello',\n                        time: new Date(`2021-07-18T18:07:13.943Z`),\n                    },\n                    {\n                        id: 'cscs',\n                        message: 'Do you wanna go for walks?',\n                        time: new Date(`2021-07-18T18:07:13.943Z`),\n                    },\n                    {\n                        id: '1',\n                        message: 'Let\\'s meet at five',\n                        time: new Date(`2021-07-18T18:07:13.943Z`),\n                    },\n                ],\n                '2': [\n                    {\n                        id: '2',\n                        message: 'Yo',\n                        time: new Date(`2021-07-18T18:07:13.943Z`),\n                    },\n                    {\n                        id: 'cscs',\n                        message: 'Are you sleeping?',\n                        time: new Date(`2021-07-18T18:07:13.943Z`),\n                    },\n                    {\n                        id: '2',\n                        message: 'Watch this crazy stuff',\n                        time: new Date(`2021-07-18T18:07:13.943Z`),\n                    },\n                ],\n                '3': [\n                    {\n                        id: '3',\n                        message: 'Oh man',\n                        time: new Date(`2021-07-18T18:07:13.943Z`),\n                    },\n                    {\n                        id: 'cscs',\n                        message: 'You so mad',\n                        time: new Date(`2021-07-18T18:07:13.943Z`),\n                    },\n                    {\n                        id: '3',\n                        message: 'Your task in this kata is to implement a function that calculates the sum of the integers inside a string. For example, in the string \"The30quick20brown10f0x1203jumps914ov3r1349the102l4zy dog\", the sum of the integers is 3635.',\n                        time: new Date(`2021-07-18T18:07:13.943Z`),\n                    },\n                ],\n                '4': [\n                    {\n                        id: '4',\n                        message: 'See you later',\n                        time: new Date(`2021-07-18T18:07:13.943Z`),\n                    },\n                    {\n                        id: 'cscs',\n                        message: 'Don\\'t forget about our business',\n                        time: new Date(`2021-07-18T18:07:13.943Z`),\n                    },\n                    {\n                        id: '4',\n                        message: 'I call you later',\n                        time: new Date(`2021-07-18T18:07:13.943Z`),\n                    },\n                ],\n            },\n\n        },\n        navbar: {\n            friends: {\n                '0': {\n                    id: '0',\n                    name: 'John',\n                    avatar: 'https://magazine.skyeng.ru/wp-content/uploads/2019/03/shutterstock_745196731.jpg',\n                },\n                '1': {\n                    id: '1',\n                    name: 'Sara',\n                    avatar: 'https://magazine.skyeng.ru/wp-content/uploads/2019/03/shutterstock_745196731.jpg',\n                },\n                '2': {\n                    id: '2',\n                    name: 'George',\n                    avatar: 'https://magazine.skyeng.ru/wp-content/uploads/2019/03/shutterstock_745196731.jpg',\n                },\n                '3': {\n                    id: '3',\n                    name: 'Jinny',\n                    avatar: 'https://magazine.skyeng.ru/wp-content/uploads/2019/03/shutterstock_745196731.jpg',\n                },\n                '4': {\n                    id: '4',\n                    name: 'Harry',\n                    avatar: 'https://magazine.skyeng.ru/wp-content/uploads/2019/03/shutterstock_745196731.jpg',\n                },\n            },\n        },\n    },\n    getState() {\n        return this._state\n    },\n    _callSubscriber() {\n        console.log('state was changed')\n    },\n    subscribe(observer) {\n        this._callSubscriber = observer // паттерн наблюдатель\n    },\n\n    dispatch(action) {\n        switch (action.type) {\n            case postsTypes.ADD_NEW_POST: // добавить новый пост на страницу профиля\n                const postsClone = clone(this._state.profile.posts.posts)\n                const newPost = {\n                    id: v1(),\n                    text: this._state.profile.posts.newPostText,\n                    time: new Date(),\n                    likes: 0,\n                }\n                this._state.profile.posts.posts = [newPost, ...postsClone]\n                this._state.profile.posts.newPostText = ''\n                this._callSubscriber()\n                break\n            case postsTypes.UPDATE_NEW_POST_TEXT: // изменить текст поста на странице профиля\n                this._state.profile.posts.newPostText = action.newText\n                this._callSubscriber()\n                break\n            case dialogsTypes.SELECT_DIALOG: // выбрать диалог\n                this._state.dialogs.selectedMessages = this._state.dialogs.userMessages[ action.id ]\n                this._state.dialogs.selectedDialog = clone(this._state.dialogs.userDialogs\n                    .find(item => item.id === action.id)) || null\n                this._callSubscriber()\n                break\n            case dialogsTypes.UPDATE_NEW_MESSAGE_TEXT: //изменить текст сообщения\n                this._state.dialogs.newMessageText = action.newText\n                this._callSubscriber()\n                break\n            case dialogsTypes.ADD_NEW_MESSAGE:\n                const selectDialogId = this._state.dialogs.selectedDialog?.id\n                if (selectDialogId) {\n                    const newMessage = {\n                        id: action.id,\n                        message: this._state.dialogs.newMessageText,\n                        time: new Date(),\n                    }\n                    const messagesClone = clone(this._state.dialogs.userMessages[ selectDialogId ])\n                    this._state.dialogs.userMessages[ selectDialogId ] = [...messagesClone, newMessage]\n                    this._state.dialogs.selectedMessages = this._state.dialogs.userMessages[ selectDialogId ]\n                    this._state.dialogs.newMessageText = ''\n                    this._callSubscriber()\n                }\n        }\n    },\n}","import React from 'react'\nimport s from './Avatar.module.css'\n\ninterface AvatarProps {\n    avatarUrl?: string\n    size?: 'small' | 'medium' | 'large'\n    shape?: 'square' | 'round'\n}\n\nconst getRandomColour = () => {\n    let rand = 0 - 0.5 + Math.random() * (255 - 0 + 1)\n    return Math.round(rand)\n}\n\nexport const Avatar: React.FC<AvatarProps> = React.memo((\n    {\n        avatarUrl,\n        size = 'medium',\n        shape = 'round',\n    },\n) => {\n    const background = avatarUrl ?\n        { backgroundImage: `url(${ avatarUrl })` } :\n        { backgroundColor: `rgb(${ getRandomColour() }, ${ getRandomColour() }, ${ getRandomColour() })` }\n\n    return (\n        <div\n            className={ [s.avatar, s[ `${ size }` ], s[ `${ shape }` ]].join(' ') }\n            style={ background }\n        ></div>\n    )\n})","import React from 'react'\nimport { UserTypes } from '../../../redux/state'\nimport s from './UserInfo.module.css'\nimport { Avatar } from '../../Avatar/Avatar'\n\n\ntype PropTypes = {\n    user: UserTypes\n}\n\nexport const UserInfo: React.FC<PropTypes> = React.memo(({ user }) => {\n    const {\n        avatar,\n        firstName,\n        lastName,\n        surName,\n        birthDate,\n        city,\n        education,\n        website,\n    } = user\n    return (\n        <div className={ s.info }>\n            <Avatar avatarUrl={ avatar } shape=\"square\" size=\"large\"/>\n            <div className={ s.description }>\n                <h2 className={ `${ s.userInfo } ${ s.userName }` }>{ `${ firstName } ${ lastName } ${ surName }` }</h2>\n                <p className={ s.userInfo }>{ `Date of Birth: ${ birthDate }` }</p>\n                <p className={ s.userInfo }>{ `City: ${ city }` }</p>\n                <p className={ s.userInfo }>{ `Education: ${ education }` }</p>\n                <p className={ s.userInfo }>Web Site: <a className={ s.websiteLink } href={ website }>{ website }</a>\n                </p>\n            </div>\n        </div>\n    )\n})","import React from 'react'\nimport s from './FormButton.module.css'\n\ninterface FormButtonProps {\n    primary?: boolean\n    value: string\n    size?: 'small' | 'medium' | 'large',\n    position?: 'start' | 'end' | 'center' | 'stretch'\n}\n\nexport const FormButton: React.FC<FormButtonProps> = React.memo((\n    {\n        primary = true,\n        value,\n        size = 'medium',\n        position = 'end',\n    },\n) => {\n    const mode = primary ? 'primary' : 'secondary'\n    return (\n        <input\n            className={ [s.formButton, s[ `${ mode }` ], s[ `${ size }` ], s[ `${ position }` ]].join(' ') }\n            type=\"submit\"\n            value={ value }\n        />\n    )\n})","import React, { FormEvent, ChangeEvent, KeyboardEvent } from 'react'\nimport { FormButton } from '../../../FormButton/FormButton'\nimport s from './NewPost.module.css'\nimport { ActionType } from '../../../../redux/state'\nimport * as actions from '../../../../store/actions/posts'\n\n\ntype PropTypes = {\n    newPostText: string\n    dispatch: (action: ActionType) => void\n}\n\nexport const NewPost: React.FC<PropTypes> = React.memo((\n    {\n        newPostText, dispatch,\n    }) => {\n\n    const createNewPost = () => {\n        dispatch(actions.addNewPost())\n    }\n\n    const submitHandler = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n        createNewPost()\n    }\n    const onEnterPressHandler = (event: KeyboardEvent<HTMLTextAreaElement>) => {\n        if (event.key === 'Enter') {\n            event.preventDefault()\n            createNewPost()\n        }\n    }\n\n    const changePostTextHandler = (event: ChangeEvent<HTMLTextAreaElement>) => {\n        dispatch(actions.updateNewPostText(event.currentTarget.value))\n    }\n\n    return (\n        <form\n            className={ s.newPostContainer }\n            onSubmit={ submitHandler }\n        >\n            <textarea\n                className={ s.text }\n                rows={ 5 }\n                value={ newPostText }\n                placeholder=\"Write text...\"\n                onChange={ changePostTextHandler }\n                onKeyPress={ onEnterPressHandler }\n            />\n            <FormButton\n                value=\"Add post\"\n                position=\"end\"\n                primary={ true }\n                size=\"medium\"\n            />\n        </form>\n    )\n})","import * as types from '../types/posts'\n\nexport const updateNewPostText = (newText: string) => ({\n    type: types.UPDATE_NEW_POST_TEXT,\n    newText,\n} as const)\n\nexport const addNewPost = () => ({\n    type: types.ADD_NEW_POST,\n} as const)","import React from 'react'\nimport { Avatar } from '../../../Avatar/Avatar'\nimport s from './PostItem.module.css'\n\n\ntype PropTypes = {\n    avatarUrl: string\n    text: string\n    likes: number\n    time: Date\n}\n\nexport const PostItem: React.FC<PropTypes> = React.memo((\n    {\n        avatarUrl,\n        text,\n        time,\n        likes,\n    }) => {\n\n    const date = time.getDate()\n    const month = time.getMonth() + 1 > 9 ? time.getMonth() + 1 : `0${ time.getMonth() + 1 }`\n    const year = time.getFullYear()\n    const hours = time.getHours()\n    const minutes = time.getMinutes() > 9 ? time.getMinutes() : `0${ time.getMinutes() }`\n    const humanDate = `${ date }.${ month }.${ year } ${ hours }:${ minutes }`\n\n    return (\n        <section className={ s.postItem }>\n            <Avatar avatarUrl={ avatarUrl }/>\n            <div className={ s.container }>\n                <article className={ s.text }>{ text }</article>\n                <time\n                    className={ s.date }\n                    dateTime={ `${ time }` }\n                >\n                    { humanDate }\n                </time>\n                <span className={ s.reaction }>likes { likes }</span>\n            </div>\n        </section>\n    )\n})","import React, { useMemo } from 'react'\nimport { NewPost } from './NewPost/NewPost'\nimport { PostItem } from './PostItem/PostItem'\nimport { ActionType, PostsTypes } from '../../../redux/state'\nimport s from './Posts.module.css'\n\n\ntype PropTypes = {\n    avatar: string\n    userPosts: PostsTypes\n    dispatch: (action: ActionType) => void\n}\n\nexport const Posts: React.FC<PropTypes> = React.memo((\n    {\n        avatar, userPosts,\n        dispatch,\n    }) => {\n\n    const { posts, newPostText } = userPosts\n    const mappedPosts = useMemo(() => posts.map((post) => {\n        return <PostItem\n            avatarUrl={ avatar }\n            text={ post.text }\n            time={ post.time }\n            likes={ post.likes }\n            key={ post.id }\n        />\n    }), [posts, avatar])\n\n    return (\n        <div className={ s.postsContainer }>\n            <h2 className={ s.title }>My Posts</h2>\n            <NewPost\n                newPostText={ newPostText }\n                dispatch={ dispatch }\n            />\n            { mappedPosts }\n        </div>\n    )\n})","import React from 'react'\nimport { UserInfo } from './UserInfo/UserInfo'\nimport { ActionType, PostsTypes, UserTypes } from '../../redux/state'\nimport { Posts } from './Posts/Posts'\nimport s from './Profile.module.css'\n\n\ntype PropTypes = {\n    user: UserTypes\n    posts: PostsTypes\n    dispatch: (action: ActionType) => void\n}\n\nexport const Profile: React.FC<PropTypes> = React.memo((\n    {\n        user,\n        posts,\n        dispatch,\n    }) => {\n    return (\n        <main className={ s.profile }>\n            <div\n                className={ s.image }\n                style={ { backgroundImage: `url(${ user.background })` } }\n            ></div>\n            <UserInfo user={ user }/>\n            <Posts\n                avatar={ user.avatar }\n                userPosts={ posts }\n                dispatch={ dispatch }\n            />\n        </main>\n    )\n})","import React from 'react'\nimport { ActionType, ProfileTypes } from '../../redux/state'\nimport { Profile } from '../../components/Profile/Profile'\n\n\ntype PropTypes = {\n    profile: ProfileTypes\n    dispatch: (action: ActionType) => void\n}\n\nexport const ProfilePage: React.FC<PropTypes> = React.memo((\n    {\n        profile, dispatch,\n    }) => {\n    const { user, posts } = profile\n    return (\n        <>\n            <Profile\n                user={ user }\n                posts={ posts }\n                dispatch={ dispatch }\n            />\n        </>\n    )\n})","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport s from './Dialog.module.css'\nimport { ActionType, DialogTypes } from '../../../redux/state'\nimport { selectDialog } from '../../../store/actions/dialogs'\n\ntype PropTypes = {\n    dialog: DialogTypes\n    dispatch: (action: ActionType) => void\n}\n\nexport const Dialog: React.FC<PropTypes> = React.memo((\n    {\n        dialog, dispatch,\n    }) => {\n    const itemClassName = `${ s.item }`\n    const onClickHandler = () => dispatch(selectDialog(dialog.id))\n\n    return (\n        <li\n            className={ itemClassName }\n            onClick={ onClickHandler }\n        >\n            <NavLink\n                className={ s.link }\n                to={ `/dialogs/${ dialog.id }` }\n                activeClassName={ s.active }\n            >\n                { dialog.name }\n            </NavLink>\n        </li>\n    )\n})","import * as types from '../types/dialogs'\n\nexport const selectDialog = (id: string) => ({\n    type: types.SELECT_DIALOG,\n    id,\n} as const)\n\nexport const updateNewMessageText = (newText: string) => ({\n    type: types.UPDATE_NEW_MESSAGE_TEXT,\n    newText,\n} as const)\n\nexport const addNewMessage = (id: string) => ({\n    type: types.ADD_NEW_MESSAGE,\n    id,\n} as const)","import React from 'react'\nimport { UserMessageTypes } from '../../../../redux/state'\nimport { Avatar } from '../../../Avatar/Avatar'\nimport s from './Message.module.css'\n\n\ntype PropTypes = {\n    userMode: boolean\n    name: string\n    message: UserMessageTypes\n    avatar: string | undefined\n}\n\nexport const Message: React.FC<PropTypes> = React.memo((\n    {\n        userMode,\n        name,\n        message,\n        avatar,\n    }) => {\n    const itemContainerMode = userMode ? `${ s.userItemContainer }` : `${ s.friendItemContainer }`\n    const humanTime = `\n        ${ message.time.getHours() }:${ message.time.getMinutes() < 10\n        ? `0${ message.time.getMinutes() }`\n        : message.time.getMinutes() }\n    `\n\n    return (\n        <div className={ [s.itemContainer, itemContainerMode].join(' ') }>\n            <Avatar avatarUrl={ avatar } size=\"small\" shape=\"round\"/>\n            <div className={ s.messageContainer }>\n                <div>\n                    <p className={ s.userName }>{ name }</p>\n                    <p className={ s.message }>{ message.message }</p>\n                </div>\n                <span className={ s.time }>{ humanTime }</span>\n            </div>\n        </div>\n    )\n})\n","import React, { ChangeEvent, FormEvent } from 'react'\nimport s from './NewMessage.module.css'\nimport { FormButton } from '../../../FormButton/FormButton'\nimport { ActionType } from '../../../../redux/state'\nimport { addNewMessage, updateNewMessageText } from '../../../../store/actions/dialogs'\n\ntype NewMessageType = {\n    newMessageText: string\n    userId: string\n    dispatch: (action: ActionType) => void\n}\n\nexport const NewMessage: React.FC<NewMessageType> = React.memo((\n    {\n        newMessageText, dispatch, userId,\n    }) => {\n\n    const submitHandler = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n        dispatch(addNewMessage(userId))\n        // console.log((messageRef.current as HTMLTextAreaElement).value)\n    }\n\n    const changeHandler = (event: ChangeEvent<HTMLTextAreaElement>) => {\n        dispatch(updateNewMessageText(event.currentTarget.value))\n    }\n\n    return (\n        <div className={ s.newMessageContainer }>\n            <form\n                className={ s.form }\n                onSubmit={ submitHandler }\n            >\n                <textarea\n                    className={ s.newMessageText }\n                    rows={ 1 }\n                    value={ newMessageText }\n                    placeholder=\"Write message...\"\n                    onChange={ changeHandler }\n                />\n                <FormButton value=\"Send\" position=\"stretch\" primary={ true } size=\"medium\"/>\n            </form>\n        </div>\n    )\n})","import React, { useMemo } from 'react'\nimport { ActionType, DialogTypes, UserMessageTypes, UserTypes } from '../../../redux/state'\nimport { Message } from './Message/Message'\nimport { NewMessage } from './NewMessage/NewMessage'\nimport s from './Messages.module.css'\n\n\ntype PropTypes = {\n    messages: Array<UserMessageTypes>\n    friend: DialogTypes\n    newMessageText: string\n    user: UserTypes\n    dispatch: (action: ActionType) => void\n}\n\nexport const Messages: React.FC<PropTypes> = React.memo((\n    {\n        messages,\n        friend,\n        newMessageText,\n        user, dispatch,\n    }) => {\n    const mappedMessages = useMemo(() => messages.map((message: UserMessageTypes, id) => {\n        const name = message.id === user.id ? user.firstName : friend.name\n        const avatar = message.id === user.id ? user.avatar : friend.avatar\n        const userMode = message.id === user.id\n        return < Message\n            key={ id }\n            userMode={ userMode }\n            name={ name }\n            message={ message }\n            avatar={ avatar }\n        />\n    }), [messages, user, friend])\n\n    return (\n        <div className={ s.messagesContainer }>\n            { mappedMessages }\n            <NewMessage\n                newMessageText={ newMessageText }\n                userId={ user.id }\n                dispatch={ dispatch }\n            />\n        </div>\n    )\n})","import React, { useMemo } from 'react'\nimport { ActionType, DialogsTypes, DialogTypes, UserTypes } from '../../redux/state'\nimport { Dialog } from './Dialog/Dialog'\nimport { Messages } from './Messages/Messages'\nimport s from './Dialogs.module.css'\n\ntype PropTypes = {\n    dialogs: DialogsTypes\n    user: UserTypes\n    dispatch: (action: ActionType) => void\n}\n\nexport const Dialogs: React.FC<PropTypes> = React.memo((\n    {\n        dialogs,\n        user,\n        dispatch,\n    }) => {\n    const { userDialogs, selectedMessages, selectedDialog, newMessageText } = dialogs\n\n    const mappedDialogs = useMemo(() => userDialogs.map((dialog: DialogTypes) => (\n        <Dialog\n            dialog={ dialog }\n            dispatch={ dispatch }\n            key={ dialog.id }\n        />\n    )), [userDialogs, dispatch])\n\n    return (\n        <div className={ s.container }>\n            <div className={ s.dialogs }>\n                <ul className={ s.list }>\n                    { mappedDialogs }\n                </ul>\n            </div>\n            <div className={ s.messages }>\n                { selectedDialog && selectedMessages\n                    ? <Messages\n                        messages={ selectedMessages }\n                        friend={ selectedDialog }\n                        newMessageText={ newMessageText }\n                        dispatch={ dispatch }\n                        user={ user }\n                    />\n                    : 'Select dialog' }\n            </div>\n        </div>\n    )\n})","import React from 'react'\nimport { ActionType, DialogsTypes, UserTypes } from '../../redux/state'\nimport { Dialogs } from '../../components/Dialogs/Dialogs'\n\ntype PropTypes = {\n    dialogs: DialogsTypes\n    user: UserTypes\n    dispatch: (action: ActionType) => void\n}\n\nexport const DialogsPage: React.FC<PropTypes> = React.memo((\n    {\n        user,\n        dialogs,\n        dispatch,\n    }) => {\n    return (\n        <>\n            <Dialogs\n                user={ user }\n                dialogs={ dialogs }\n                dispatch={ dispatch }\n            />\n        </>\n    )\n})","import React from 'react'\n\nexport const NewsPage = React.memo(() => {\n    console.log('newsPage')\n    return (\n        <>\n            NewsPage\n        </>\n    )\n})","import React from 'react'\n\nexport const MusicPage = React.memo(() => {\n    console.log('musicPage')\n    return (\n        <>\n            MusicPage\n        </>\n    )\n})","import React from 'react'\n\nexport const SettingsPage = React.memo(() => {\n    console.log('settingsPage')\n    return (\n        <>\n            SettingsPage\n        </>\n    )\n})","import React from \"react\"\nimport s from './Header.module.css'\n\nexport const Header = () => {\n    return (\n        <header className={s.header}>\n            <img\n                className={s.image}\n                src=\"https://img.icons8.com/ios-filled/50/000000/logo.png\"\n                alt=\"logo\"\n            />\n            <h1>Такая-то сеть</h1>\n        </header>\n    )\n}","import React from 'react'\nimport { FriendTypes } from '../../../redux/state'\nimport { Avatar } from '../../Avatar/Avatar'\nimport s from './FriendItem.module.css'\n\ntype PropTypes = {\n    friend: FriendTypes\n}\n\nexport const FriendItem: React.FC<PropTypes> = React.memo(({ friend }) => {\n    const { name, avatar } = friend\n    return (\n        <div className={ s.friendContainer }>\n            <span className={ s.friendName }>{ name }</span>\n            <Avatar avatarUrl={ avatar } shape=\"round\" size=\"medium\"/>\n        </div>\n    )\n})","import React, { useMemo } from 'react'\nimport { NavbarTypes } from '../../redux/state'\nimport { NavLink } from 'react-router-dom'\nimport { FriendItem } from './FriendItem/FriendItem'\nimport s from './NavBar.module.css'\n\n\ntype NavItemTypes = {\n    id: number\n    name: string\n}\ntype NavTypes = Array<NavItemTypes>\n\ntype PropTypes = {\n    navbar: NavbarTypes\n}\n\nconst nav: NavTypes = [\n    { id: 0, name: 'Profile' },\n    { id: 1, name: 'Dialogs' },\n    { id: 2, name: 'News' },\n    { id: 3, name: 'Music' },\n    { id: 4, name: 'Settings' },\n]\n\nexport const NavBar: React.FC<PropTypes> = React.memo(({ navbar }) => {\n    const mappedNavigation = useMemo(() => nav.map((item) => (\n        <div className={ s.item } key={ item.id }>\n            <NavLink\n                to={ `/${ item.name.toLowerCase() }` }\n                className={ s.link }\n                activeClassName={ s.active }\n            >{ item.name }</NavLink>\n        </div>\n    )), [])\n\n    const mappedFriends = useMemo(() => Object.values(navbar.friends).map((friend) => (\n        <FriendItem\n            friend={ friend }\n            key={ friend.id }\n        />\n    )), [navbar.friends])\n\n\n    return (\n        <nav className={ s.nav }>\n            { mappedNavigation }\n            <div className={ s.friendsContainer }>\n                { mappedFriends }\n            </div>\n        </nav>\n    )\n})","import React from 'react'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { StoreType } from './redux/state'\nimport { useRoutes } from './routes'\nimport { Header } from './components/Header/Header'\nimport { NavBar } from './components/NavBar/NavBar'\nimport './App.css'\n\nexport type AppTypes = {\n    store: StoreType\n}\n\nexport const App: React.FC<AppTypes> = (\n    {\n        store,\n    }) => {\n    const state = store.getState()\n    const { profile, dialogs, navbar } = state\n    const routes = useRoutes(profile, dialogs, store.dispatch.bind(store))\n    return (\n        <Router>\n            <div className=\"app-wrapper\">\n                <Header/>\n                <NavBar navbar={ navbar }/>\n                { routes }\n            </div>\n        </Router>\n    )\n}\n","import React from 'react'\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport { ProfileTypes, DialogsTypes, ActionType } from './redux/state'\nimport { ProfilePage } from './Pages/ProfilePage/ProfilePage'\nimport { DialogsPage } from './Pages/DialogsPage/DialogsPage'\nimport { NewsPage } from './Pages/NewsPage/NewsPage'\nimport { MusicPage } from './Pages/MusicPage/MusicPage'\nimport { SettingsPage } from './Pages/SettingsPage/SettingsPage'\n\nexport const useRoutes = (\n    profile: ProfileTypes,\n    dialogs: DialogsTypes,\n    dispatch: (action: ActionType) => void,\n) => {\n    return (\n        <Switch>\n            <Route path=\"/profile\">\n                <ProfilePage\n                    profile={ profile }\n                    dispatch={ dispatch }\n                />\n            </Route>\n            <Route path=\"/dialogs\">\n                <DialogsPage\n                    dialogs={ dialogs }\n                    user={ profile.user }\n                    dispatch={ dispatch }\n                />\n            </Route>\n            <Route path=\"/news\">\n                <NewsPage/>\n            </Route>\n            <Route path=\"/music\">\n                <MusicPage/>\n            </Route>\n            <Route path=\"/settings\">\n                <SettingsPage/>\n            </Route>\n            <Redirect to=\"/profile\"/>\n        </Switch>\n    )\n}","import './index.css'\nimport { store } from './redux/state'\nimport ReactDOM from 'react-dom'\nimport React from 'react'\nimport { App } from './App'\n\nconst rerenderTree = () => {\n    ReactDOM.render(\n        <React.StrictMode>\n            <App\n                store={ store }\n            />\n        </React.StrictMode>,\n        document.getElementById('root'),\n    )\n}\nrerenderTree()\nstore.subscribe(rerenderTree)"],"sourceRoot":""}