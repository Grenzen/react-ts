{"version":3,"sources":["components/Profile/UserInfo/UserInfo.module.css","components/Users/UsersItem/UsersItem.module.css","components/Dialogs/Messages/Message/Message.module.css","components/Profile/Posts/PostItem/PostItem.module.css","components/Dialogs/Dialogs.module.css","components/NavBar/NavBar.module.css","components/FormButton/FormButton.module.css","components/Avatar/Avatar.module.css","components/Dialogs/Dialog/Dialog.module.css","components/Dialogs/Messages/NewMessage/NewMessage.module.css","components/Users/Users.module.css","components/Profile/Posts/NewPost/NewPost.module.css","components/Profile/Posts/Posts.module.css","components/Profile/Profile.module.css","components/Header/Header.module.css","components/NavBar/FriendItem/FriendItem.module.css","components/Dialogs/Messages/Messages.module.css","store/types/posts.tsx","store/reducers/posts.ts","store/types/dialogs.tsx","store/reducers/dialogs.ts","store/reducers/user.ts","store/reducers/friends.ts","store/types/users.ts","store/reducers/users.ts","store/reducers/index.ts","store/actions/users.ts","services/users.ts","store/sagas/usersSagas.ts","store/sagas/index.ts","store/index.ts","components/Avatar/Avatar.tsx","components/Profile/UserInfo/UserInfo.tsx","components/FormButton/FormButton.tsx","components/Profile/Posts/NewPost/NewPost.tsx","components/Profile/Posts/PostItem/PostItem.tsx","components/Profile/Posts/Posts.tsx","components/Profile/Profile.tsx","Pages/ProfilePage/ProfilePage.tsx","store/actions/posts.tsx","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Messages/Message/Message.tsx","components/Dialogs/Messages/NewMessage/NewMessage.tsx","components/Dialogs/Messages/Messages.tsx","components/Dialogs/Dialogs.tsx","Pages/DialogsPage/DialogsPage.tsx","store/actions/dialogs.tsx","Pages/NewsPage/NewsPage.tsx","Pages/MusicPage/MusicPage.tsx","Pages/SettingsPage/SettingsPage.tsx","components/Users/UsersItem/UsersItem.tsx","components/Users/Users.tsx","Pages/UsersPage/UsersPage.tsx","components/Header/Header.tsx","components/NavBar/FriendItem/FriendItem.tsx","components/NavBar/NavBar.tsx","App.tsx","routes.tsx","index.tsx"],"names":["module","exports","UPDATE_NEW_POST_TEXT","ADD_NEW_POST","initialState","userId","newPostText","posts","id","text","time","Date","likes","SELECT_DIALOG","UPDATE_NEW_MESSAGE_TEXT","ADD_NEW_MESSAGE","selectedDialog","selectedMessages","newMessageText","userDialogs","name","avatar","userMessages","message","firstName","lastName","surName","background","birthDate","city","education","website","FETCH_USERS","REQUESTED_USERS","REQUESTED_USERS_SUCCEEDED","REQUESTED_USERS_FAILED","CHANGE_FOLLOW","CLEAR_USERS","users","isUsersLoading","isErrors","actualPage","combineReducers","user","state","friends","action","type","types","newPost","postId","postTime","newText","dialogs","find","item","selectDialogId","newMessage","date","newMessages","payload","map","followed","requestedUsersSuccess","getUsers","page","a","axios","get","data","status","items","mappedUsers","userAvatar","photos","small","userFullName","userStatus","userLocation","fetchUsers","watchUsers","put","store","getState","call","usersService","actions","takeEvery","watchSagas","all","saga","createSagaMiddleware","enhancer","compose","applyMiddleware","createStore","rootReducers","run","getRandomColour","rand","Math","random","round","Avatar","React","memo","avatarUrl","size","shape","backgroundImage","backgroundColor","className","s","join","style","UserInfo","info","description","userInfo","userName","websiteLink","href","FormButton","primary","value","position","mode","formButton","NewPost","changeNewPostTextCallback","addNewPostCallback","newPostContainer","onSubmit","event","preventDefault","rows","placeholder","onChange","currentTarget","onKeyPress","key","PostItem","getDate","month","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","humanDate","postItem","container","dateTime","reaction","Posts","userPosts","mappedPosts","useMemo","post","postsContainer","title","Profile","profile","image","ProfileContainer","connect","dispatch","v1","ProfilePage","Dialog","dialog","selectDialogCallback","onClick","link","to","activeClassName","active","Message","userMode","itemContainerMode","userItemContainer","friendItemContainer","humanTime","itemContainer","messageContainer","NewMessage","changeNewMessageTextCallback","triggerAddNewMessage","newMessageContainer","form","Messages","messages","friend","addNewMessageToDialogCallback","mappedMessages","messagesContainer","Dialogs","mappedDialogs","list","DialogsContainer","dialogId","updateNewMessageText","DialogsPage","NewsPage","console","log","MusicPage","SettingsPage","UsersItem","changeFollowCallback","followContainer","userInfoContainer","userInfoFullName","userInfoStatus","userLocationContainer","userLocationCountry","country","userLocationCity","Users","fetchUsersCallback","clearUsersCallback","useEffect","mappedUsersItem","UsersPageContainer","UsersContainer","UsersPage","Header","header","src","alt","FriendItem","friendContainer","friendName","nav","NavBar","mappedNavigation","toLowerCase","mappedFriends","Object","values","friendsContainer","App","routes","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7c9749b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"UserInfo_info__2EQyR\",\"description\":\"UserInfo_description__14juR\",\"userName\":\"UserInfo_userName__11PxP\",\"userInfo\":\"UserInfo_userInfo__19Gg7\",\"websiteLink\":\"UserInfo_websiteLink__3D7ka\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userItemContainer\":\"UsersItem_userItemContainer__25c_a\",\"followContainer\":\"UsersItem_followContainer__3ZPGQ\",\"userInfoContainer\":\"UsersItem_userInfoContainer__3khJi\",\"userInfoFullName\":\"UsersItem_userInfoFullName__1dTRO\",\"userInfoStatus\":\"UsersItem_userInfoStatus__3i0_t\",\"userLocationContainer\":\"UsersItem_userLocationContainer__3vZyU\",\"userLocationCountry\":\"UsersItem_userLocationCountry__3wHWM\",\"userLocationCity\":\"UsersItem_userLocationCity__2Hr13\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemContainer\":\"Message_itemContainer__3Ogp1\",\"userItemContainer\":\"Message_userItemContainer__L8nc4\",\"messageContainer\":\"Message_messageContainer__50BSK\",\"friendItemContainer\":\"Message_friendItemContainer__30-yD\",\"userName\":\"Message_userName__1inz4\",\"message\":\"Message_message__2XMh9\",\"time\":\"Message_time__R0PKs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postItem\":\"PostItem_postItem__cJGuU\",\"container\":\"PostItem_container__2JWlg\",\"title\":\"PostItem_title__3ciLf\",\"text\":\"PostItem_text__1-F9Y\",\"date\":\"PostItem_date__2_aLQ\",\"reaction\":\"PostItem_reaction__3faHJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Dialogs_container__2p0uA\",\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"list\":\"Dialogs_list__3m0__\",\"info\":\"Dialogs_info__3vu_m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__1FWUI\",\"item\":\"NavBar_item__2RAQQ\",\"link\":\"NavBar_link__2Iixg\",\"active\":\"NavBar_active__1HRI5\",\"friendsContainer\":\"NavBar_friendsContainer__3dQug\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formButton\":\"FormButton_formButton__3Y9lb\",\"primary\":\"FormButton_primary__1Vw-K\",\"secondary\":\"FormButton_secondary__2WLr0\",\"start\":\"FormButton_start__oYJER\",\"center\":\"FormButton_center__2BNk0\",\"end\":\"FormButton_end__le1rA\",\"stretch\":\"FormButton_stretch__AiuYc\",\"small\":\"FormButton_small__3X9yO\",\"medium\":\"FormButton_medium__3A7Ff\",\"large\":\"FormButton_large__3YqLg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Avatar_avatar__2A8Ju\",\"round\":\"Avatar_round__2hSiZ\",\"square\":\"Avatar_square__3sTiD\",\"small\":\"Avatar_small__3X69T\",\"medium\":\"Avatar_medium__1gMp0\",\"large\":\"Avatar_large__ou5Nn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Dialog_item__2jaF4\",\"link\":\"Dialog_link__2CIRa\",\"active\":\"Dialog_active__2fc4o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newMessageContainer\":\"NewMessage_newMessageContainer__O9LOI\",\"form\":\"NewMessage_form__1LYM4\",\"newMessageText\":\"NewMessage_newMessageText__1H5T9\",\"button\":\"NewMessage_button__YNSf_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"Users_users__2Iv27\",\"UsersPageContainer\":\"Users_UsersPageContainer__3x8h8\",\"UsersContainer\":\"Users_UsersContainer__2PbJ6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPostContainer\":\"NewPost_newPostContainer__1vaC7\",\"title\":\"NewPost_title__2nRLX\",\"text\":\"NewPost_text__1eobX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsContainer\":\"Posts_postsContainer__3fBmN\",\"title\":\"Posts_title__23BoN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__3dzvr\",\"image\":\"Profile_image__2MW_9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\",\"image\":\"Header_image__1zcEI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendContainer\":\"FriendItem_friendContainer__312yD\",\"friendName\":\"FriendItem_friendName__1VsdD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messagesContainer\":\"Messages_messagesContainer__3RCBn\"};","export const UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT'\nexport const ADD_NEW_POST = 'ADD-NEW-POST'","import * as types from '../types/posts'\nimport * as postsActions from '../actions/posts'\n\nexport type PostType = {\n    id: string\n    text: string\n    time: Date\n    likes: number\n}\n\nexport type PostsType = {\n    userId: string\n    newPostText: string\n    posts: Array<PostType>\n}\n\nexport type UpdateNewPostTextType = ReturnType<typeof postsActions.updateNewPostText>\nexport type AddNewPostType = ReturnType<typeof postsActions.addNewPost>\nexport type ActionPostsType = AddNewPostType | UpdateNewPostTextType\n\nconst initialState: PostsType = {\n    userId: '0',\n    newPostText: '',\n    posts: [\n        {\n            id: 'ccc',\n            text: 'В новой записи вы решили уточнить точное время дня (а точнее ночи), когда именно была сделана запись. Строку со временем можно оставить просто текстом, но есть вариант получше. В HTML есть специальный тег для разметки даты и времени',\n            time: new Date(`2021-07-18T15:07:55.582Z`),\n            likes: 3,\n\n        },\n        {\n            id: 'vvv',\n            text: 'Инструменты для статической типизации, такие как Flow или TypeScript, позволяют отлавливать большую часть ошибок ещё до исполнения кода. Кроме того, они существенно улучшают процессы разработки, добавляя автодополнение и другие возможности. Для приложений с большой кодовой базой мы рекомендуем использовать Flow или TypeScript вместо PropTypes.',\n            time: new Date(`2021-07-18T18:07:13.943Z`),\n            likes: 20,\n        },\n        {\n            id: 'lll',\n            text: 'Flow — это библиотека для статической типизации JavaScript, разработанная в Facebook и часто применяемая в связке с React. Flow расширяет возможности JavaScript, добавляя аннотации типов для переменных, функций и React-компонентов.',\n            time: new Date(`2021-07-18T18:38:10.515Z`),\n            likes: 11,\n        },\n    ],\n}\n\nexport const postsReducer = (state: PostsType = initialState, action: ActionPostsType): PostsType => {\n    switch (action.type) {\n        case types.ADD_NEW_POST: // добавить новый пост на страницу профиля\n            const newPost = {\n                id: action.postId,\n                text: state.newPostText,\n                time: action.postTime,\n                likes: 0,\n            }\n            return {\n                ...state,\n                posts: [newPost, ...state.posts],\n                newPostText: '',\n            }\n        case types.UPDATE_NEW_POST_TEXT: // изменить текст поста на странице профиля\n            return {\n                ...state,\n                newPostText: action.newText,\n            }\n        default:\n            return state\n    }\n}","export const SELECT_DIALOG = 'SELECT-DIALOG'\nexport const UPDATE_NEW_MESSAGE_TEXT = 'UPDATE-NEW-MESSAGE-TEXT'\nexport const ADD_NEW_MESSAGE = 'ADD-NEW-MESSAGE'","import * as types from '../types/dialogs'\nimport * as dialogsActions from '../actions/dialogs'\n\nexport type DialogType = {\n    id: string\n    name: string\n    avatar: string\n}\n\nexport type UserMessageType = {\n    id: string\n    message: string\n    time: Date\n}\n\nexport type UsersMessagesType = {\n    [ key: string ]: Array<UserMessageType>\n}\n\nexport type DialogsType = {\n    selectedDialog: DialogType | null\n    selectedMessages: Array<UserMessageType> | null\n    newMessageText: string\n    userDialogs: Array<DialogType>\n    userMessages: UsersMessagesType\n}\n\nexport type SelectDialogType = ReturnType<typeof dialogsActions.selectDialog>\nexport type UpdateNewMessageTextType = ReturnType<typeof dialogsActions.updateNewMessageText>\nexport type AddNewMessageType = ReturnType<typeof dialogsActions.addNewMessage>\nexport type ActionDialogsType = SelectDialogType | UpdateNewMessageTextType | AddNewMessageType\n\nconst initialState: DialogsType = {\n    selectedDialog: null,\n    selectedMessages: null,\n    newMessageText: '',\n    userDialogs: [\n        {\n            id: '0',\n            name: 'John',\n            avatar: 'https://sun9-74.userapi.com/Ph-WiuOtF985il9AvN9JqiCWedmHtSGSSTXrSA/ltEB2Z2-YO4.jpg',\n        },\n        {\n            id: '1',\n            name: 'Sara',\n            avatar: 'https://sun9-74.userapi.com/Ph-WiuOtF985il9AvN9JqiCWedmHtSGSSTXrSA/ltEB2Z2-YO4.jpg',\n        },\n        {\n            id: '2',\n            name: 'George',\n            avatar: 'https://sun9-74.userapi.com/Ph-WiuOtF985il9AvN9JqiCWedmHtSGSSTXrSA/ltEB2Z2-YO4.jpg',\n        },\n        {\n            id: '3',\n            name: 'Jinny',\n            avatar: 'https://sun9-74.userapi.com/Ph-WiuOtF985il9AvN9JqiCWedmHtSGSSTXrSA/ltEB2Z2-YO4.jpg',\n        },\n        {\n            id: '4',\n            name: 'Harry',\n            avatar: 'https://sun9-74.userapi.com/Ph-WiuOtF985il9AvN9JqiCWedmHtSGSSTXrSA/ltEB2Z2-YO4.jpg',\n        },\n    ],\n    userMessages: {\n        '0': [\n            {\n                id: '0',\n                message: 'Hi',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n            {\n                id: 'cscs',\n                message: 'How are you?',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n            {\n                id: '0',\n                message: 'What are you doing now?',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n        ],\n        '1': [\n            {\n                id: '1',\n                message: 'Hello',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n            {\n                id: 'cscs',\n                message: 'Do you wanna go for walks?',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n            {\n                id: '1',\n                message: 'Let\\'s meet at five',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n        ],\n        '2': [\n            {\n                id: '2',\n                message: 'Yo',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n            {\n                id: 'cscs',\n                message: 'Are you sleeping?',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n            {\n                id: '2',\n                message: 'Watch this crazy stuff',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n        ],\n        '3': [\n            {\n                id: '3',\n                message: 'Oh man',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n            {\n                id: 'cscs',\n                message: 'You so mad',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n            {\n                id: '3',\n                message: 'Your task in this kata is to implement a function that calculates the sum of the integers inside a string. For example, in the string \"The30quick20brown10f0x1203jumps914ov3r1349the102l4zy dog\", the sum of the integers is 3635.',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n        ],\n        '4': [\n            {\n                id: '4',\n                message: 'See you later',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n            {\n                id: 'cscs',\n                message: 'Don\\'t forget about our business',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n            {\n                id: '4',\n                message: 'I call you later',\n                time: new Date(`2021-07-18T18:07:13.943Z`),\n            },\n        ],\n    },\n}\n\nexport const dialogsReducer = (state: DialogsType = initialState, action: ActionDialogsType): DialogsType => {\n    switch (action.type) {\n        case types.SELECT_DIALOG: // выбрать диалог\n            return {\n                ...state,\n                selectedMessages: state.userMessages[ action.id ],\n                selectedDialog: state.userDialogs.find(item => item.id === action.id) || null,\n            }\n        case types.UPDATE_NEW_MESSAGE_TEXT: //изменить текст сообщения\n            return {\n                ...state,\n                newMessageText: action.newText,\n            }\n        case types.ADD_NEW_MESSAGE: //добавить новое сообщение\n            const selectDialogId = state.selectedDialog?.id\n            if (selectDialogId) {\n                const newMessage = {\n                    id: action.id,\n                    message: state.newMessageText,\n                    time: action.date,\n                }\n                const newMessages = [...state.userMessages[ selectDialogId ], newMessage]\n                return {\n                    ...state,\n                    userMessages: {\n                        ...state.userMessages,\n                        [ selectDialogId ]: newMessages,\n                    },\n                    selectedMessages: newMessages,\n                    newMessageText: '',\n                }\n            }\n            return state\n        default:\n            return state\n    }\n}","export type UserType = {\n    id: string\n    firstName: string\n    lastName: string\n    surName: string\n    avatar: string\n    background: string\n    birthDate: string\n    city: string\n    education: string\n    website: string\n}\n\nconst initialState: UserType = {\n    id: 'cscs',\n    firstName: 'John',\n    lastName: 'Dou',\n    surName: '',\n    avatar: 'https://ichef.bbci.co.uk/news/976/cpsprodpb/A7E9/production/_118158924_gettyimages-507245091.jpg',\n    background: 'https://st.depositphotos.com/1522993/4737/v/950/depositphotos_47372005-stock-illustration-orange-blue-background-with-triagles.jpg',\n    birthDate: '2 January 2000',\n    city: 'Minsk',\n    education: 'BSU\\'11',\n    website: 'https://it-kamasutra.com',\n}\n\nexport const userReducer = (state: UserType = initialState, action: any): UserType => {\n    return state\n}","export type FriendType = {\n    id: string\n    name: string\n    avatar: string\n}\n\nexport type FriendsType = {\n    [ key: string ]: FriendType\n}\n\nconst initialState: FriendsType = {\n    '0': {\n        id: '0',\n        name: 'John',\n        avatar: 'https://magazine.skyeng.ru/wp-content/uploads/2019/03/shutterstock_745196731.jpg',\n    },\n    '1': {\n        id: '1',\n        name: 'Sara',\n        avatar: 'https://magazine.skyeng.ru/wp-content/uploads/2019/03/shutterstock_745196731.jpg',\n    },\n    '2': {\n        id: '2',\n        name: 'George',\n        avatar: 'https://magazine.skyeng.ru/wp-content/uploads/2019/03/shutterstock_745196731.jpg',\n    },\n    '3': {\n        id: '3',\n        name: 'Jinny',\n        avatar: 'https://magazine.skyeng.ru/wp-content/uploads/2019/03/shutterstock_745196731.jpg',\n    },\n    '4': {\n        id: '4',\n        name: 'Harry',\n        avatar: 'https://magazine.skyeng.ru/wp-content/uploads/2019/03/shutterstock_745196731.jpg',\n    },\n}\n\nexport const friendsReducer = (state: FriendsType = initialState, action: any): FriendsType => {\n    return state\n}\n\n","// Fetch Users\nexport const FETCH_USERS = 'FETCH-USERS'\n\nexport const REQUESTED_USERS = 'REQUESTED-USERS'\nexport const REQUESTED_USERS_SUCCEEDED = 'REQUESTED-USERS-SUCCEEDED'\nexport const REQUESTED_USERS_FAILED = 'REQUESTED-USERS-FAILED'\n\nexport const CHANGE_FOLLOW = 'CHANGE-FOLLOW'\n\n// Clear Users\nexport const CLEAR_USERS = 'CLEAR-USERS'","import * as types from '../types/users'\nimport * as actions from '../actions/users'\n\ntype UserLocation = {\n    country: string\n    city: string\n}\n\nexport type UsersType = {\n    userId: number\n    userAvatar: string | null\n    userFullName: string\n    userStatus: string | null\n    userLocation: UserLocation | null\n    followed: boolean\n}\n\nexport type UsersStateType = {\n    users: UsersType[] | []\n    isUsersLoading: boolean\n    isErrors: boolean\n    actualPage: number\n}\nconst initialState: UsersStateType = {\n    users: [],\n    isUsersLoading: false,\n    isErrors: false,\n    actualPage: 1,\n}\n\nexport type RequestedUsersType = ReturnType<typeof actions.requestedUsers>\nexport type RequestedUsersSuccessType = ReturnType<typeof actions.requestedUsersSuccess>\nexport type RequestedUsersError = ReturnType<typeof actions.requestedUsersError>\n\nexport type ChangeFollowType = ReturnType<typeof actions.changeFollow>\n\nexport type ClearUsersType = ReturnType<typeof actions.clearUsers>\n\nexport type ActionUsersType =\n    RequestedUsersType | RequestedUsersSuccessType | RequestedUsersError |\n    ChangeFollowType | ClearUsersType\n\n\nexport const usersReducer = (state: UsersStateType = initialState, action: ActionUsersType): UsersStateType => {\n    switch (action.type) {\n        case types.REQUESTED_USERS:\n            return {\n                ...state,\n                isUsersLoading: true,\n            }\n        case types.REQUESTED_USERS_SUCCEEDED:\n            return {\n                ...state,\n                users: [...state.users, ...action.payload.users],\n                isUsersLoading: false,\n                actualPage: state.actualPage + 1,\n            }\n        case types.REQUESTED_USERS_FAILED:\n            return {\n                ...state,\n                isUsersLoading: false,\n                isErrors: true,\n            }\n        case types.CHANGE_FOLLOW:\n            return {\n                ...state,\n                users: state.users && state.users.map(user => user.userId === action.payload.userId ? {\n                    ...user,\n                    followed: action.payload.followed,\n                } : user),\n            }\n        case types.CLEAR_USERS:\n            return {\n                ...state,\n                users: [],\n                actualPage: 1,\n            }\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux'\nimport { postsReducer } from './posts'\nimport { dialogsReducer } from './dialogs'\nimport { userReducer } from './user'\nimport { friendsReducer } from './friends'\nimport { usersReducer } from './users'\n\nexport default combineReducers({\n    user: userReducer,\n    friends: friendsReducer,\n    posts: postsReducer,\n    dialogs: dialogsReducer,\n    users: usersReducer,\n})","import * as types from '../types/users'\nimport { UsersType } from '../reducers/users'\n\n// Fetch Users for sagas\nexport const fetchUsers = () => ({\n    type: types.FETCH_USERS,\n} as const)\n\n// Requested Users for reducer\nexport const requestedUsers = () => ({\n    type: types.REQUESTED_USERS,\n} as const)\n\nexport const requestedUsersSuccess = (users: UsersType[]) => ({\n    type: types.REQUESTED_USERS_SUCCEEDED,\n    payload: { users },\n} as const)\n\nexport const requestedUsersError = () => ({\n    type: types.REQUESTED_USERS_FAILED,\n} as const)\n\n// other actions\nexport const changeFollow = (userId: number, followed: boolean) => ({\n    type: types.CHANGE_FOLLOW,\n    payload: {\n        userId,\n        followed: !followed,\n    },\n} as const)\n\n// Clear users\nexport const clearUsers = () => ({\n    type: types.CLEAR_USERS,\n} as const)","import axios from 'axios'\nimport { UsersType } from '../store/reducers/users'\n\ntype UserServerType = {\n    name: string\n    id: number\n    photos: { small: null | string, large: null | string }\n    status: null | string\n    followed: boolean\n}\n\nconst BASE_API = 'https://social-network.samuraijs.com/api/1.0/'\nexport const getUsers = async (page: string) => {\n    const { data, status } = await axios.get(`${ BASE_API }users?page=${ page }`)\n    const users = data.items.map(mappedUsers)\n    return status === 200 && data ? users : null\n}\n\nconst mappedUsers = (user: UserServerType): UsersType => ({\n    userId: user.id,\n    userAvatar: user.photos.small,\n    userFullName: user.name,\n    userStatus: user.status,\n    userLocation: null,\n    followed: user.followed,\n})","import { call, put, takeEvery } from 'redux-saga/effects'\nimport * as types from '../types/users'\nimport * as actions from '../actions/users'\nimport * as usersService from '../../services/users'\nimport { UsersType } from '../reducers/users'\nimport store from '../../store'\n\nexport function* fetchUsers() {\n    try {\n        yield put(actions.requestedUsers())\n        const page = store.getState().users.actualPage\n        const users: UsersType[] = yield call(usersService.getUsers, `${ page }`)\n        yield put(actions.requestedUsersSuccess(users))\n    } catch (error) {\n        yield put(actions.requestedUsersError())\n    }\n}\n\nexport default function* watchUsers() {\n    yield takeEvery(types.FETCH_USERS, fetchUsers)\n}","import { all } from 'redux-saga/effects'\nimport watchUsers from './usersSagas'\n\nexport default function* watchSagas() {\n    yield all([watchUsers()])\n}","import { compose, applyMiddleware, createStore } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport rootReducers from './reducers'\nimport watchSagas from './sagas'\nimport { useDispatch } from 'react-redux'\n\nexport type RootStateType = ReturnType<typeof store.getState>\nexport type AppDispatchType = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\n\nconst saga = createSagaMiddleware()\n\n// redux dev tool\nconst enhancer = compose(applyMiddleware(saga))\nexport const store = createStore(rootReducers, enhancer)\n\nsaga.run(watchSagas)\n\nexport default store","import React from 'react'\nimport s from './Avatar.module.css'\n\ninterface AvatarProps {\n    avatarUrl?: string | null\n    size?: 'small' | 'medium' | 'large'\n    shape?: 'square' | 'round'\n}\n\nconst getRandomColour = () => {\n    let rand = 0 - 0.5 + Math.random() * (255 - 0 + 1)\n    return Math.round(rand)\n}\n\nexport const Avatar: React.FC<AvatarProps> = React.memo((\n    {\n        avatarUrl,\n        size = 'medium',\n        shape = 'round',\n    },\n) => {\n    const background = avatarUrl ?\n        { backgroundImage: `url(${ avatarUrl })` } :\n        { backgroundColor: `rgb(${ getRandomColour() }, ${ getRandomColour() }, ${ getRandomColour() })` }\n\n    return (\n        <div\n            className={ [s.avatar, s[ `${ size }` ], s[ `${ shape }` ]].join(' ') }\n            style={ background }\n        ></div>\n    )\n})","import React from 'react'\nimport s from './UserInfo.module.css'\nimport { Avatar } from '../../Avatar/Avatar'\nimport { UserType } from '../../../store/reducers/user'\n\n\ntype UserInfoType = {\n    user: UserType\n}\n\nexport const UserInfo: React.FC<UserInfoType> = React.memo(({ user }) => {\n    const {\n        avatar,\n        firstName,\n        lastName,\n        surName,\n        birthDate,\n        city,\n        education,\n        website,\n    } = user\n    return (\n        <div className={ s.info }>\n            <Avatar avatarUrl={ avatar } shape=\"square\" size=\"large\"/>\n            <div className={ s.description }>\n                <h2 className={ `${ s.userInfo } ${ s.userName }` }>{ `${ firstName } ${ lastName } ${ surName }` }</h2>\n                <p className={ s.userInfo }>{ `Date of Birth: ${ birthDate }` }</p>\n                <p className={ s.userInfo }>{ `City: ${ city }` }</p>\n                <p className={ s.userInfo }>{ `Education: ${ education }` }</p>\n                <p className={ s.userInfo }>Web Site: <a className={ s.websiteLink } href={ website }>{ website }</a>\n                </p>\n            </div>\n        </div>\n    )\n})","import React from 'react'\nimport s from './FormButton.module.css'\n\ninterface FormButtonProps {\n    primary?: boolean\n    value: string\n    size?: 'small' | 'medium' | 'large',\n    position?: 'start' | 'end' | 'center' | 'stretch'\n}\n\nexport const FormButton: React.FC<FormButtonProps> = React.memo((\n    {\n        primary = true,\n        value,\n        size = 'medium',\n        position = 'end',\n    },\n) => {\n    const mode = primary ? 'primary' : 'secondary'\n    return (\n        <input\n            className={ [s.formButton, s[ `${ mode }` ], s[ `${ size }` ], s[ `${ position }` ]].join(' ') }\n            type=\"submit\"\n            value={ value }\n        />\n    )\n})","import React, { FormEvent, ChangeEvent, KeyboardEvent } from 'react'\nimport { FormButton } from '../../../FormButton/FormButton'\nimport s from './NewPost.module.css'\nimport { MapDispatchPropType } from '../../../../Pages/ProfilePage/ProfilePage'\n\ntype NewPostType = {\n    newPostText: string\n} & MapDispatchPropType\n\nexport const NewPost: React.FC<NewPostType> = React.memo((\n    {\n        newPostText,\n        changeNewPostTextCallback, addNewPostCallback,\n    }) => {\n\n    const onSubmit = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n        addNewPostCallback()\n    }\n    const onEnterPress = (event: KeyboardEvent<HTMLTextAreaElement>) => {\n        if (event.key === 'Enter') {\n            event.preventDefault()\n            addNewPostCallback()\n        }\n    }\n\n    const onChangePostText = (event: ChangeEvent<HTMLTextAreaElement>) =>\n        changeNewPostTextCallback(event.currentTarget.value)\n\n    return (\n        <form\n            className={ s.newPostContainer }\n            onSubmit={ onSubmit }\n        >\n            <textarea\n                className={ s.text }\n                rows={ 5 }\n                value={ newPostText }\n                placeholder=\"Write text...\"\n                onChange={ onChangePostText }\n                onKeyPress={ onEnterPress }\n            />\n            <FormButton\n                value=\"Add post\"\n                position=\"end\"\n                primary={ true }\n                size=\"medium\"\n            />\n        </form>\n    )\n})","import React from 'react'\nimport { Avatar } from '../../../Avatar/Avatar'\nimport s from './PostItem.module.css'\n\n\ntype PostItemType = {\n    avatarUrl: string\n    text: string\n    likes: number\n    time: Date\n}\n\nexport const PostItem: React.FC<PostItemType> = React.memo((\n    {\n        avatarUrl,\n        text,\n        time,\n        likes,\n    }) => {\n\n    const date = time.getDate()\n    const month = time.getMonth() + 1 > 9 ? time.getMonth() + 1 : `0${ time.getMonth() + 1 }`\n    const year = time.getFullYear()\n    const hours = time.getHours()\n    const minutes = time.getMinutes() > 9 ? time.getMinutes() : `0${ time.getMinutes() }`\n    const humanDate = `${ date }.${ month }.${ year } ${ hours }:${ minutes }`\n\n    return (\n        <section className={ s.postItem }>\n            <Avatar avatarUrl={ avatarUrl }/>\n            <div className={ s.container }>\n                <article className={ s.text }>{ text }</article>\n                <time\n                    className={ s.date }\n                    dateTime={ `${ time }` }\n                >\n                    { humanDate }\n                </time>\n                <span className={ s.reaction }>likes { likes }</span>\n            </div>\n        </section>\n    )\n})","import React, { useMemo } from 'react'\nimport { NewPost } from './NewPost/NewPost'\nimport { PostItem } from './PostItem/PostItem'\nimport s from './Posts.module.css'\nimport { PostsType } from '../../../store/reducers/posts'\nimport { MapDispatchPropType } from '../../../Pages/ProfilePage/ProfilePage'\n\ntype PostsPropType = {\n    avatar: string\n    userPosts: PostsType\n} & MapDispatchPropType\n\nexport const Posts: React.FC<PostsPropType> = React.memo((\n    {\n        avatar, userPosts,\n        changeNewPostTextCallback, addNewPostCallback,\n    }) => {\n\n    const { posts, newPostText } = userPosts\n    const mappedPosts = useMemo(() => posts.map((post) => {\n        return <PostItem\n            avatarUrl={ avatar }\n            text={ post.text }\n            time={ post.time }\n            likes={ post.likes }\n            key={ post.id }\n        />\n    }), [posts, avatar])\n\n    return (\n        <div className={ s.postsContainer }>\n            <h2 className={ s.title }>My Posts</h2>\n            <NewPost\n                newPostText={ newPostText }\n                addNewPostCallback={ addNewPostCallback }\n                changeNewPostTextCallback={ changeNewPostTextCallback }\n            />\n            { mappedPosts }\n        </div>\n    )\n})","import React from 'react'\nimport { UserInfo } from './UserInfo/UserInfo'\nimport { Posts } from './Posts/Posts'\nimport s from './Profile.module.css'\nimport { MapDispatchPropType, MapStatePropType } from '../../Pages/ProfilePage/ProfilePage'\n\ntype ProfilePropType = MapDispatchPropType & MapStatePropType\n\nexport const Profile: React.FC<ProfilePropType> = React.memo((\n    {\n        user, posts,\n        changeNewPostTextCallback, addNewPostCallback,\n    }) => {\n    return (\n        <main className={ s.profile }>\n            <div\n                className={ s.image }\n                style={ { backgroundImage: `url(${ user.background })` } }\n            ></div>\n            <UserInfo user={ user }/>\n            <Posts\n                avatar={ user.avatar }\n                userPosts={ posts }\n                addNewPostCallback={ addNewPostCallback }\n                changeNewPostTextCallback={ changeNewPostTextCallback }\n            />\n        </main>\n    )\n})","import React from 'react'\nimport { Profile } from '../../components/Profile/Profile'\nimport { PostsType } from '../../store/reducers/posts'\nimport { UserType } from '../../store/reducers/user'\nimport { RootStateType } from '../../store'\nimport * as actions from '../../store/actions/posts'\nimport { connect } from 'react-redux'\n\nexport type MapStatePropType = {\n    user: UserType\n    posts: PostsType\n}\n\nexport type MapDispatchPropType = {\n    changeNewPostTextCallback: (newText: string) => void\n    addNewPostCallback: () => void\n}\n\nconst mapStateToProps = (state: RootStateType): MapStatePropType => {\n    return {\n        user: state.user,\n        posts: state.posts,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): MapDispatchPropType => {\n    return {\n        changeNewPostTextCallback: (newText: string) => dispatch(actions.updateNewPostText(newText)),\n        addNewPostCallback: () => dispatch(actions.addNewPost()),\n    }\n}\n\nconst ProfileContainer = connect(mapStateToProps, mapDispatchToProps)(Profile)\n\nexport const ProfilePage = React.memo(() => <ProfileContainer/>)\n","import * as types from '../types/posts'\nimport { v1 } from 'uuid'\n\nexport const updateNewPostText = (newText: string) => ({\n    type: types.UPDATE_NEW_POST_TEXT,\n    newText,\n} as const)\n\nexport const addNewPost = () => ({\n    type: types.ADD_NEW_POST,\n    postId: v1(),\n    postTime: new Date(),\n} as const)","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport s from './Dialog.module.css'\nimport { DialogType } from '../../../store/reducers/dialogs'\n\ntype PropTypes = {\n    dialog: DialogType\n    selectDialogCallback: (id: string) => void\n}\n\nexport const Dialog: React.FC<PropTypes> = React.memo((\n    {\n        dialog, selectDialogCallback,\n    }) => {\n    const onSelectDialog = () => selectDialogCallback(dialog.id)\n\n    return (\n        <li\n            className={ s.item }\n            onClick={ onSelectDialog }\n        >\n            <NavLink\n                className={ s.link }\n                to={ `/dialogs/${ dialog.id }` }\n                activeClassName={ s.active }\n            >\n                { dialog.name }\n            </NavLink>\n        </li>\n    )\n})","import React from 'react'\nimport { Avatar } from '../../../Avatar/Avatar'\nimport s from './Message.module.css'\nimport { UserMessageType } from '../../../../store/reducers/dialogs'\n\n\ntype PropTypes = {\n    userMode: boolean\n    name: string\n    message: UserMessageType\n    avatar: string | undefined\n}\n\nexport const Message: React.FC<PropTypes> = React.memo((\n    {\n        userMode,\n        name,\n        message,\n        avatar,\n    }) => {\n    const itemContainerMode = userMode ? `${ s.userItemContainer }` : `${ s.friendItemContainer }`\n    const humanTime = `\n        ${ message.time.getHours() }:${ message.time.getMinutes() < 10\n        ? `0${ message.time.getMinutes() }`\n        : message.time.getMinutes() }\n    `\n\n    return (\n        <div className={ [s.itemContainer, itemContainerMode].join(' ') }>\n            <Avatar avatarUrl={ avatar } size=\"small\" shape=\"round\"/>\n            <div className={ s.messageContainer }>\n                <div>\n                    <p className={ s.userName }>{ name }</p>\n                    <p className={ s.message }>{ message.message }</p>\n                </div>\n                <span className={ s.time }>{ humanTime }</span>\n            </div>\n        </div>\n    )\n})\n","import React, { ChangeEvent, FormEvent } from 'react'\nimport s from './NewMessage.module.css'\nimport { FormButton } from '../../../FormButton/FormButton'\n\ntype NewMessageType = {\n    newMessageText: string\n    changeNewMessageTextCallback: (newText: string) => void\n    triggerAddNewMessage: () => void\n}\n\nexport const NewMessage: React.FC<NewMessageType> = React.memo((\n    {\n        newMessageText,\n        changeNewMessageTextCallback,\n        triggerAddNewMessage,\n    }) => {\n\n    const onSubmit = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n        triggerAddNewMessage()\n    }\n\n    const onChangeMessageText = (event: ChangeEvent<HTMLTextAreaElement>) => {\n        changeNewMessageTextCallback(event.currentTarget.value)\n    }\n\n    return (\n        <div className={ s.newMessageContainer }>\n            <form\n                className={ s.form }\n                onSubmit={ onSubmit }\n            >\n                <textarea\n                    className={ s.newMessageText }\n                    rows={ 1 }\n                    value={ newMessageText }\n                    placeholder=\"Tap-tap...\"\n                    onChange={ onChangeMessageText }\n                />\n                <FormButton value=\"Send\" position=\"stretch\" primary={ true } size=\"medium\"/>\n            </form>\n        </div>\n    )\n})","import React, { useMemo } from 'react'\nimport { Message } from './Message/Message'\nimport { NewMessage } from './NewMessage/NewMessage'\nimport s from './Messages.module.css'\nimport { DialogType, UserMessageType } from '../../../store/reducers/dialogs'\nimport { UserType } from '../../../store/reducers/user'\n\ntype PropTypes = {\n    messages: Array<UserMessageType>\n    friend: DialogType\n    newMessageText: string\n    user: UserType\n    changeNewMessageTextCallback: (newText: string) => void\n    addNewMessageToDialogCallback: (userId: string) => void\n}\n\nexport const Messages: React.FC<PropTypes> = React.memo((\n    {\n        messages, friend, newMessageText,\n        user,\n        changeNewMessageTextCallback, addNewMessageToDialogCallback,\n    }) => {\n    const mappedMessages = useMemo(() => messages.map((message: UserMessageType, id) => {\n        const name = message.id === user.id ? user.firstName : friend.name\n        const avatar = message.id === user.id ? user.avatar : friend.avatar\n        const userMode = message.id === user.id\n        return < Message\n            key={ id }\n            userMode={ userMode }\n            name={ name }\n            message={ message }\n            avatar={ avatar }\n        />\n    }), [messages, user, friend])\n\n    const triggerAddNewMessage = () => addNewMessageToDialogCallback(user.id)\n\n    return (\n        <div className={ s.messagesContainer }>\n            { mappedMessages }\n            <NewMessage\n                newMessageText={ newMessageText }\n                changeNewMessageTextCallback={ changeNewMessageTextCallback }\n                triggerAddNewMessage={ triggerAddNewMessage }\n            />\n        </div>\n    )\n})","import React, { useMemo } from 'react'\nimport { Dialog } from './Dialog/Dialog'\nimport { Messages } from './Messages/Messages'\nimport s from './Dialogs.module.css'\nimport { DialogType } from '../../store/reducers/dialogs'\nimport { MapDispatchPropType, MapStatePropType } from '../../Pages/DialogsPage/DialogsPage'\n\ntype PropTypes = MapStatePropType & MapDispatchPropType\n\nexport const Dialogs: React.FC<PropTypes> = React.memo((\n    {\n        dialogs, user,\n        selectDialogCallback, changeNewMessageTextCallback,\n        addNewMessageToDialogCallback,\n    }) => {\n    const { userDialogs, selectedMessages, selectedDialog, newMessageText } = dialogs\n\n    const mappedDialogs = useMemo(() => userDialogs.map((dialog: DialogType) => (\n        <Dialog\n            dialog={ dialog }\n            selectDialogCallback={ selectDialogCallback }\n            key={ dialog.id }\n        />\n    )), [userDialogs, selectDialogCallback])\n\n    return (\n        <div className={ s.container }>\n            <div className={ s.dialogs }>\n                <ul className={ s.list }>\n                    { mappedDialogs }\n                </ul>\n            </div>\n            <div className={ s.messages }>\n                { selectedDialog && selectedMessages\n                    ? <Messages\n                        messages={ selectedMessages }\n                        friend={ selectedDialog }\n                        newMessageText={ newMessageText }\n                        user={ user }\n                        changeNewMessageTextCallback={ changeNewMessageTextCallback }\n                        addNewMessageToDialogCallback={ addNewMessageToDialogCallback }\n                    />\n                    : <div className={ s.info }>Select dialog</div> }\n            </div>\n        </div>\n    )\n})","import React from 'react'\nimport { Dialogs } from '../../components/Dialogs/Dialogs'\nimport { addNewMessage, selectDialog, updateNewMessageText } from '../../store/actions/dialogs'\nimport { UserType } from '../../store/reducers/user'\nimport { RootStateType } from '../../store'\nimport { DialogsType } from '../../store/reducers/dialogs'\nimport { connect } from 'react-redux'\n\nexport type MapStatePropType = {\n    user: UserType\n    dialogs: DialogsType\n}\n\nexport type MapDispatchPropType = {\n    selectDialogCallback: (dialogId: string) => void\n    changeNewMessageTextCallback: (newText: string) => void\n    addNewMessageToDialogCallback: (userId: string) => void\n}\n\nconst mapStateToProps = (state: RootStateType): MapStatePropType => {\n    return {\n        user: state.user,\n        dialogs: state.dialogs,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): MapDispatchPropType => {\n    return {\n        selectDialogCallback: (dialogId: string) => dispatch(selectDialog(dialogId)),\n        changeNewMessageTextCallback: (newText: string) => dispatch(updateNewMessageText(newText)),\n        addNewMessageToDialogCallback: (userId) => dispatch(addNewMessage(userId)),\n    }\n}\n\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)\n\nexport const DialogsPage = React.memo(() => <DialogsContainer/>)","import * as types from '../types/dialogs'\n\nexport const selectDialog = (id: string) => ({\n    type: types.SELECT_DIALOG,\n    id,\n} as const)\n\nexport const updateNewMessageText = (newText: string) => ({\n    type: types.UPDATE_NEW_MESSAGE_TEXT,\n    newText,\n} as const)\n\nexport const addNewMessage = (id: string) => ({\n    type: types.ADD_NEW_MESSAGE,\n    id,\n    date: new Date(),\n} as const)","import React from 'react'\n\nexport const NewsPage = React.memo(() => {\n    console.log('newsPage')\n    return (\n        <>\n            NewsPage\n        </>\n    )\n})","import React from 'react'\n\nexport const MusicPage = React.memo(() => {\n    console.log('musicPage')\n    return (\n        <>\n            MusicPage\n        </>\n    )\n})","import React from 'react'\n\nexport const SettingsPage = React.memo(() => {\n    console.log('settingsPage')\n    return (\n        <>\n            SettingsPage\n        </>\n    )\n})","import React, { FormEvent } from 'react'\nimport s from './UsersItem.module.css'\nimport { Avatar } from '../../Avatar/Avatar'\nimport { FormButton } from '../../FormButton/FormButton'\nimport { UsersType } from '../../../store/reducers/users'\n\ntype UsersItemType = {\n    user: UsersType\n    changeFollowCallback: (userId: number, followed: boolean) => void\n}\n\nexport const UsersItem: React.FC<UsersItemType> = React.memo((\n    {\n        user, changeFollowCallback,\n    },\n) => {\n    const changeFollow = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n        changeFollowCallback(user.userId, user.followed)\n    }\n    return <div className={ s.userItemContainer }>\n        <div className={ s.followContainer }>\n            <Avatar\n                size={ 'medium' }\n                shape={ 'round' }\n                avatarUrl={ user.userAvatar }\n            />\n            <form\n                onSubmit={ changeFollow }\n            >\n                <FormButton\n                    value={ user.followed ? 'Unfollow' : 'Follow' }\n                    size={ 'medium' }\n                    position={ 'center' }\n                    primary={ !user.followed }\n                />\n            </form>\n        </div>\n        <div className={ s.userInfoContainer }>\n            <h3 className={ s.userInfoFullName }>{ user.userFullName }</h3>\n            <p className={ s.userInfoStatus }>{ user.userStatus ? user.userStatus : `${ user.userFullName } has no status` }</p>\n        </div>\n        <div className={ s.userLocationContainer }>\n            <p className={ s.userLocationCountry }>{ user.userLocation ? user.userLocation.country : 'No country' }</p>\n            <p className={ s.userLocationCity }>{ user.userLocation ? user.userLocation.city : 'No city' }</p>\n        </div>\n    </div>\n})","import React, { FormEvent, useEffect, useMemo } from 'react'\nimport { MapStateToPropsType, MapDispatchToPropsType } from '../../Pages/UsersPage/UsersPage'\nimport s from './Users.module.css'\nimport { UsersItem } from './UsersItem/UsersItem'\nimport { FormButton } from '../FormButton/FormButton'\n\ntype UsersPropType = MapStateToPropsType & MapDispatchToPropsType\n\nexport const Users: React.FC<UsersPropType> = React.memo((\n    {\n        isUsersLoading,\n        users, changeFollowCallback,\n        fetchUsersCallback, clearUsersCallback,\n    },\n) => {\n    useEffect(() => {\n        fetchUsersCallback()\n        return () => {\n            clearUsersCallback()\n        }\n    }, [fetchUsersCallback, clearUsersCallback])\n\n    const setUsers = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n        fetchUsersCallback()\n    }\n    const mappedUsersItem = useMemo(() => users && users.map(user => (\n        <UsersItem\n            key={ user.userId }\n            user={ user }\n            changeFollowCallback={ changeFollowCallback }\n        />\n    )), [users, changeFollowCallback])\n\n    return <main className={ s.users }>\n        <div className={ s.UsersPageContainer }>\n            <div className={ s.UsersContainer }>\n                { isUsersLoading ? 'Loading...' : mappedUsersItem }\n            </div>\n            <form onSubmit={ setUsers }>\n                <FormButton\n                    value={ 'Show more' }\n                    primary size={ 'large' }\n                    position={ 'center' }\n                />\n            </form>\n        </div>\n    </main>\n})","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Users } from '../../components/Users/Users'\nimport { RootStateType } from '../../store'\nimport { UsersStateType } from '../../store/reducers/users'\nimport * as actions from '../../store/actions/users'\n\nexport type MapStateToPropsType = UsersStateType\n\nexport type MapDispatchToPropsType = {\n    fetchUsersCallback: () => void\n    changeFollowCallback: (userId: number, followed: boolean) => void\n    clearUsersCallback: () => void\n}\n\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\n    return {\n        users: state.users.users,\n        isUsersLoading: state.users.isUsersLoading,\n        isErrors: state.users.isErrors,\n        actualPage: state.users.actualPage,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any): MapDispatchToPropsType => ({\n    fetchUsersCallback: () => dispatch(actions.fetchUsers()),\n    changeFollowCallback: (userId, followed) => dispatch(actions.changeFollow(userId, followed)),\n    clearUsersCallback: () => dispatch(actions.clearUsers()),\n})\n\nconst UsersContainer = connect(mapStateToProps, mapDispatchToProps)(Users)\nexport const UsersPage = React.memo(() => <UsersContainer/>)","import React from \"react\"\nimport s from './Header.module.css'\n\nexport const Header = () => {\n    return (\n        <header className={s.header}>\n            <img\n                className={s.image}\n                src=\"https://img.icons8.com/ios-filled/50/000000/logo.png\"\n                alt=\"logo\"\n            />\n            <h1>Такая-то сеть</h1>\n        </header>\n    )\n}","import React from 'react'\nimport { Avatar } from '../../Avatar/Avatar'\nimport s from './FriendItem.module.css'\nimport { FriendType } from '../../../store/reducers/friends'\n\ntype PropTypes = {\n    friend: FriendType\n}\n\nexport const FriendItem: React.FC<PropTypes> = React.memo(({ friend }) => {\n    const { name, avatar } = friend\n    return (\n        <div className={ s.friendContainer }>\n            <span className={ s.friendName }>{ name }</span>\n            <Avatar avatarUrl={ avatar } shape=\"round\" size=\"medium\"/>\n        </div>\n    )\n})","import React, { useMemo } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { FriendItem } from './FriendItem/FriendItem'\nimport s from './NavBar.module.css'\nimport { FriendsType } from '../../store/reducers/friends'\n\n\ntype NavItemType = {\n    id: number\n    name: string\n}\ntype NavType = Array<NavItemType>\n\ntype PropType = {\n    friends: FriendsType\n}\n\nconst nav: NavType = [\n    { id: 0, name: 'Profile' },\n    { id: 1, name: 'Dialogs' },\n    { id: 2, name: 'Users' },\n    { id: 3, name: 'News' },\n    { id: 4, name: 'Music' },\n    { id: 5, name: 'Settings' },\n]\n\nexport const NavBar: React.FC<PropType> = React.memo(({ friends }) => {\n    const mappedNavigation = useMemo(() => nav.map((item) => (\n        <div className={ s.item } key={ item.id }>\n            <NavLink\n                to={ `/${ item.name.toLowerCase() }` }\n                className={ s.link }\n                activeClassName={ s.active }\n            >{ item.name }</NavLink>\n        </div>\n    )), [])\n\n    const mappedFriends = useMemo(() => Object.values(friends).map((friend) => (\n        <FriendItem\n            friend={ friend }\n            key={ friend.id }\n        />\n    )), [friends])\n\n\n    return (\n        <nav className={ s.nav }>\n            { mappedNavigation }\n            <div className={ s.friendsContainer }>\n                { mappedFriends }\n            </div>\n        </nav>\n    )\n})","import React from 'react'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { useRoutes } from './routes'\nimport { Header } from './components/Header/Header'\nimport { NavBar } from './components/NavBar/NavBar'\nimport './App.css'\nimport { RootStateType } from './store'\n\nexport type AppTypes = {\n    state: RootStateType\n}\n\nexport const App: React.FC<AppTypes> = (\n    {\n        state,\n    }) => {\n    const { friends } = state\n    const routes = useRoutes()\n    return (\n        <Router>\n            <div className=\"app-wrapper\">\n                <Header/>\n                <NavBar friends={ friends }/>\n                { routes }\n            </div>\n        </Router>\n    )\n}\n","import React from 'react'\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport { ProfilePage } from './Pages/ProfilePage/ProfilePage'\nimport { DialogsPage } from './Pages/DialogsPage/DialogsPage'\nimport { NewsPage } from './Pages/NewsPage/NewsPage'\nimport { MusicPage } from './Pages/MusicPage/MusicPage'\nimport { SettingsPage } from './Pages/SettingsPage/SettingsPage'\nimport { UsersPage } from './Pages/UsersPage/UsersPage'\n\nexport const useRoutes = () => {\n    return (\n        <Switch>\n            <Route path=\"/profile\">\n                <ProfilePage/>\n            </Route>\n            <Route path=\"/dialogs\">\n                <DialogsPage/>\n            </Route>\n            <Route path=\"/users\">\n                <UsersPage/>\n            </Route>\n            <Route path=\"/news\">\n                <NewsPage/>\n            </Route>\n            <Route path=\"/music\">\n                <MusicPage/>\n            </Route>\n            <Route path=\"/settings\">\n                <SettingsPage/>\n            </Route>\n            <Redirect to=\"/profile\"/>\n        </Switch>\n    )\n}","import './index.css'\nimport { store } from './store'\nimport ReactDOM from 'react-dom'\nimport React from 'react'\nimport { App } from './App'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={ store }>\n            <App state={ store.getState() }/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n)"],"sourceRoot":""}